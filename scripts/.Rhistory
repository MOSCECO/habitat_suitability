# (nombre de jours)
# les copernicus sont au format as.POSIXct() %>% as.numeric()
# (nombres de secondes)
my_date <- stn$eventDate[i] %>%
as.POSIXct(format = "%d/%m/%Y", tz = "GMT") %>%
as.Date()
# bornes de l'intervalle de temps à filtrer du netcdf
my_date_up <- (my_date + 1) %>% as.POSIXct() %>% as.numeric()
my_date_dw <- (my_date - 1) %>% as.POSIXct() %>% as.numeric()
# filtre du netcdf puis conversion en tibble
tb <- nc %>%
hyper_filter(
time = between(time, my_date_dw, my_date_up)
) %>%
hyper_tibble() %>%
mutate(
time = time %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
)
my_date_dw
my_date_up
my_date
my_date + 1
my_date - 1
# bornes de l'intervalle de temps à filtrer du netcdf
my_date_up <- (my_date + 2) %>% as.POSIXct() %>% as.numeric()
my_date_dw <- (my_date - 1) %>% as.POSIXct() %>% as.numeric()
# filtre du netcdf puis conversion en tibble
tb <- nc %>%
hyper_filter(
time = between(time, my_date_dw, my_date_up)
) %>%
hyper_tibble() %>%
mutate(
time = time %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
)
# bornes de l'intervalle de temps à filtrer du netcdf
my_date_up <- (my_date + 2) %>% as.POSIXct() %>% as.numeric()
my_date_dw <- (my_date - 2) %>% as.POSIXct() %>% as.numeric()
nc %>%
hyper_filter(
time = between(time, my_date_dw, my_date_up)
)
# filtre du netcdf puis conversion en tibble
tb <- nc %>%
hyper_filter(
time = between(time, my_date_dw, my_date_up)
) %>%
hyper_tibble() %>%
mutate(
time = time %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
)
tb
my_date
# itération sur chaque évènement de collectes
stn_valeurs <- lapply(
1:nrow(stn),
function(i) {
tryCatch(
{
print(
paste0(i, "/", nrow(stn), " of ", varenv, " from ", isl)
)
# filtre de la date
my_origin <- "1970-01-01"
# date de l'évènement de collecte au bon format
# les sextant sont au format as.Date %>% as.numeric()
# (nombre de jours)
# les copernicus sont au format as.POSIXct() %>% as.numeric()
# (nombres de secondes)
my_date <- stn$eventDate[i] %>%
as.POSIXct(format = "%d/%m/%Y", tz = "GMT") %>%
as.Date()
# bornes de l'intervalle de temps à filtrer du netcdf
my_date_up <- (my_date + 1) %>% as.POSIXct() %>% as.numeric()
my_date_dw <- (my_date - 1) %>% as.POSIXct() %>% as.numeric()
# filtre du netcdf puis conversion en tibble
tb <- nc %>%
hyper_filter(
time = between(time, my_date_dw, my_date_up)
) %>%
hyper_tibble() %>%
mutate(
time = time %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
)
bool <- my_date %in% unique(tb$time)
tb <- if (bool) {
tb %>% filter(., time == my_date)
} else {
tb %>% split(f = tb$time)
}
# création d'un raster et extraction de la valeur pour la station
r <- if (bool) {
rasterFromXYZ(tb[, c(2, 3, 1)])
} else {
lapply(
tb,
function(x) rasterFromXYZ(x[, c(2, 3, 1)])
)
}
# plot(r)
val <- if (bool) {
raster::extract(r, stn[i, ])
} else {
vals <- lapply(
r,
function(y) raster::extract(y, stn[i, ])
)
print(vals)
mean(vals)
}
out <- tibble(
date  = unique(tb$time),
value = val
)
return(out)
},
error = function(e) NA
)
}
)
# itération sur les variables
varenv_valeurs <- lapply(
names(ncs),
function(varenv) {
nc <- ncs[[varenv]]
min(nc$transforms$time$time) %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
max(nc$transforms$time$time) %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
# itération sur chaque évènement de collectes
stn_valeurs <- lapply(
1:nrow(stn),
function(i) {
tryCatch(
{
print(
paste0(i, "/", nrow(stn), " of ", varenv, " from ", isl)
)
# filtre de la date
my_origin <- "1970-01-01"
# date de l'évènement de collecte au bon format
# les sextant sont au format as.Date %>% as.numeric()
# (nombre de jours)
# les copernicus sont au format as.POSIXct() %>% as.numeric()
# (nombres de secondes)
my_date <- stn$eventDate[i] %>%
as.POSIXct(format = "%d/%m/%Y", tz = "GMT") %>%
as.Date()
# bornes de l'intervalle de temps à filtrer du netcdf
my_date_up <- (my_date + 1) %>% as.POSIXct() %>% as.numeric()
my_date_dw <- (my_date - 1) %>% as.POSIXct() %>% as.numeric()
# filtre du netcdf puis conversion en tibble
tb <- nc %>%
hyper_filter(
time = between(time, my_date_dw, my_date_up)
) %>%
hyper_tibble() %>%
mutate(
time = time %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
)
bool <- my_date %in% unique(tb$time)
tb <- if (bool) {
tb %>% filter(., time == my_date)
} else {
tb %>% split(f = tb$time)
}
# création d'un raster et extraction de la valeur pour la station
r <- if (bool) {
rasterFromXYZ(tb[, c(2, 3, 1)])
} else {
lapply(
tb,
function(x) rasterFromXYZ(x[, c(2, 3, 1)])
)
}
# plot(r)
val <- if (bool) {
raster::extract(r, stn[i, ])
} else {
vals <- lapply(
r,
function(y) raster::extract(y, stn[i, ])
)
print(vals)
mean(vals)
}
out <- tibble(
date0 = my_date,
date1 = unique(tb$time),
value = val
)
return(out)
},
error = function(e) {
return(
tibble(
date0 = my_date,
date1 = NA,
value = NA
)
)
}
)
}
)
return(stn_valeurs)
}
)
warnings()
stn_valeurs
stn2 <- stn[360:nrow(stn), ]
dim(stn2)
# itération sur les variables
varenv_valeurs <- lapply(
names(ncs),
function(varenv) {
nc <- ncs[[varenv]]
min(nc$transforms$time$time) %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
max(nc$transforms$time$time) %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
# itération sur chaque évènement de collectes
stn_valeurs <- lapply(
1:nrow(stn),
function(i) {
return(
tryCatch(
{
print(
paste0(i, "/", nrow(stn), " of ", varenv, " from ", isl)
)
# filtre de la date
my_origin <- "1970-01-01"
# date de l'évènement de collecte au bon format
# les sextant sont au format as.Date %>% as.numeric()
# (nombre de jours)
# les copernicus sont au format as.POSIXct() %>% as.numeric()
# (nombres de secondes)
my_date <- stn$eventDate[i] %>%
as.POSIXct(format = "%d/%m/%Y", tz = "GMT") %>%
as.Date()
# bornes de l'intervalle de temps à filtrer du netcdf
my_date_up <- (my_date + 1) %>% as.POSIXct() %>% as.numeric()
my_date_dw <- (my_date - 1) %>% as.POSIXct() %>% as.numeric()
# filtre du netcdf puis conversion en tibble
tb <- nc %>%
hyper_filter(
time = between(time, my_date_dw, my_date_up)
) %>%
hyper_tibble() %>%
mutate(
time = time %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
)
bool <- my_date %in% unique(tb$time)
tb <- if (bool) {
tb %>% filter(., time == my_date)
} else {
tb %>% split(f = tb$time)
}
# création d'un raster et extraction de la valeur pour la station
r <- if (bool) {
rasterFromXYZ(tb[, c(2, 3, 1)])
} else {
lapply(
tb,
function(x) rasterFromXYZ(x[, c(2, 3, 1)])
)
}
# plot(r)
val <- if (bool) {
raster::extract(r, stn[i, ])
} else {
vals <- lapply(
r,
function(y) raster::extract(y, stn[i, ])
)
print(vals)
mean(vals)
}
out <- tibble(
date0 = my_date,
date1 = unique(tb$time),
value = val
)
return(out)
},
error = function(e) {
return(
tibble(
date0 = my_date,
date1 = NA,
value = NA
)
)
}
)
)
}
)
return(stn_valeurs)
}
)
# itération sur chaque évènement de collectes
stn_valeurs <- lapply(
1:nrow(stn2),
function(i) {
return(
tryCatch(
{
print(
paste0(i, "/", nrow(stn), " of ", varenv, " from ", isl)
)
# filtre de la date
my_origin <- "1970-01-01"
# date de l'évènement de collecte au bon format
# les sextant sont au format as.Date %>% as.numeric()
# (nombre de jours)
# les copernicus sont au format as.POSIXct() %>% as.numeric()
# (nombres de secondes)
my_date <- stn$eventDate[i] %>%
as.POSIXct(format = "%d/%m/%Y", tz = "GMT") %>%
as.Date()
# bornes de l'intervalle de temps à filtrer du netcdf
my_date_up <- (my_date + 1) %>% as.POSIXct() %>% as.numeric()
my_date_dw <- (my_date - 1) %>% as.POSIXct() %>% as.numeric()
# filtre du netcdf puis conversion en tibble
tb <- nc %>%
hyper_filter(
time = between(time, my_date_dw, my_date_up)
) %>%
hyper_tibble() %>%
mutate(
time = time %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
)
bool <- my_date %in% unique(tb$time)
tb <- if (bool) {
tb %>% filter(., time == my_date)
} else {
tb %>% split(f = tb$time)
}
# création d'un raster et extraction de la valeur pour la station
r <- if (bool) {
rasterFromXYZ(tb[, c(2, 3, 1)])
} else {
lapply(
tb,
function(x) rasterFromXYZ(x[, c(2, 3, 1)])
)
}
# plot(r)
val <- if (bool) {
raster::extract(r, stn[i, ])
} else {
vals <- lapply(
r,
function(y) raster::extract(y, stn[i, ])
)
print(vals)
mean(vals)
}
out <- tibble(
date0 = my_date,
date1 = unique(tb$time),
value = val
)
return(out)
},
error = function(e) {
return(
tibble(
date0 = my_date,
date1 = NA,
value = NA
)
)
}
)
)
}
)
stn2 <- stn[360:380, ]
# itération sur chaque évènement de collectes
stn_valeurs <- lapply(
1:nrow(stn2),
function(i) {
return(
tryCatch(
{
print(
paste0(i, "/", nrow(stn), " of ", varenv, " from ", isl)
)
# filtre de la date
my_origin <- "1970-01-01"
# date de l'évènement de collecte au bon format
# les sextant sont au format as.Date %>% as.numeric()
# (nombre de jours)
# les copernicus sont au format as.POSIXct() %>% as.numeric()
# (nombres de secondes)
my_date <- stn$eventDate[i] %>%
as.POSIXct(format = "%d/%m/%Y", tz = "GMT") %>%
as.Date()
# bornes de l'intervalle de temps à filtrer du netcdf
my_date_up <- (my_date + 1) %>% as.POSIXct() %>% as.numeric()
my_date_dw <- (my_date - 1) %>% as.POSIXct() %>% as.numeric()
# filtre du netcdf puis conversion en tibble
tb <- nc %>%
hyper_filter(
time = between(time, my_date_dw, my_date_up)
) %>%
hyper_tibble() %>%
mutate(
time = time %>%
as.POSIXct(origin = "1970-01-01") %>%
as.Date()
)
bool <- my_date %in% unique(tb$time)
tb <- if (bool) {
tb %>% filter(., time == my_date)
} else {
tb %>% split(f = tb$time)
}
# création d'un raster et extraction de la valeur pour la station
r <- if (bool) {
rasterFromXYZ(tb[, c(2, 3, 1)])
} else {
lapply(
tb,
function(x) rasterFromXYZ(x[, c(2, 3, 1)])
)
}
# plot(r)
val <- if (bool) {
raster::extract(r, stn[i, ])
} else {
vals <- lapply(
r,
function(y) raster::extract(y, stn[i, ])
)
print(vals)
mean(vals)
}
out <- tibble(
date0 = my_date,
date1 = unique(tb$time),
value = val
)
return(out)
},
error = function(e) {
return(
tibble(
date0 = my_date,
date1 = NA,
value = NA
)
)
}
)
)
}
)
stn_valeurs
warnings()
usethis::create_from_github(
"https://github.com/MOSCECO/habitat_suitability.git",
destdir = "/home/borea/Documents/mosceco/r_projects/MOSCECO_L2"
)
gitcreds::gitcreds_get()
gitcreds::gitcreds_set()
usethis::create_github_token()
gitcreds::gitcreds_set()
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
gitcreds::gitcreds_get()
usethis::gh_token_help()
usethis::git_sitrep()
gh::gh_whoami()
gitcreds::gitcreds_set()
usethis::git_sitrep()
usethis::create_from_github(
"https://github.com/MOSCECO/data_environment.git",
destdir = "/home/borea/Documents/mosceco/r_projects/MOSCECO_L2"
)
usethis::create_from_github(
"https://github.com/MOSCECO/data_environment.git",
destdir = "/home/borea/Documents/mosceco/r_projects/MOSCECO_L2"
)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/ERR/ERROR_github_bad_credentials.R", echo=TRUE)
Sys.unsetenv("GITHUB_PAT")
Sys.getenv("GITHUB_PAT")
gitcreds::gitcreds_set()
usethis::create_from_github(
"https://github.com/MOSCECO/data_environment.git",
destdir = "/home/borea/Documents/mosceco/r_projects/MOSCECO_L2"
)
