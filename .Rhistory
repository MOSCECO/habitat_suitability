specificity_stdv = sd(specificity),
calibration_mean = mean(calibration),
calibration_stdv = sd(calibration),
validation_mean = mean(validation),
validation_stdv = sd(validation)
)
# sauvegarde
file_name <- gsub(" ", ".", bn) %>%
paste(pts_name_model, "evaluation", "summary", sep = "_") %>%
paste0(".csv")
write.csv(
modScoresSummary01,
here(path_eval, file_name),
row.names = F,
fileEncoding = "UTF-16"
)
# attention : moyenne des runs != indices calculés sur tous les runs
modScoresSummary02 <- modScores %>%
filter(run == "allRun")
file_name <- gsub(" ", ".", bn) %>%
paste(pts_name_model, "evaluation", "allRun", sep = "_") %>%
paste0(".csv")
modScoresSummary02
file_name <- gsub(" ", ".", bn) %>%
paste(pts_name_model, "evaluation", "allRun", sep = "_") %>%
paste0(".csv")
write.csv(
modScoresSummary02,
here(path_eval, file_name),
row.names = F,
fileEncoding = "UTF-16"
)
p1 <- bm_PlotEvalMean_gm(
bm.out      = spec_models,
metric.eval = c("ROC","TSS"),
group.by    = "algo",
dataset = "calibration",
do.plot = T,
main = NULL,
ylim = c(0, 1),
xlim = c(0, 1)
)
saveRDS(p1, here(path_eval, "TSSfROC_algo.rds"))
ggexport(
plot = p1$plot,
filename = here(path_eval, "TSSfROC_algo.png"),
width = 1000,
height = 800,
res = 200,
units = "px",
device = "png",
limitsize = F
)
p2 <- bm_PlotEvalMean_gm(
bm.out      = spec_models,
metric.eval = c("ROC","TSS"),
group.by    = "run",
dataset = "calibration",
do.plot = T,
main = NULL,
ylim = c(0, 1),
xlim = c(0, 1)
)
saveRDS(p2, here(path_eval, "TSSfROC_runs.rds"))
ggexport(
plot = p2$plot,
filename = here(path_eval, "TSSfROC_runs.png"),
width = 1000,
height = 800,
res = 200,
units = "px",
device = "png",
limitsize = F
)
p3 <- bm_PlotEvalMean_gm(
bm.out      = spec_models,
metric.eval = c("KAPPA","TSS"),
group.by    = "algo",
dataset = "calibration",
main = NULL,
ylim = c(0, 1),
xlim = c(0, 1)
)
saveRDS(p3, here(path_eval, "TSSfKAP_algo.rds"))
ggexport(
plot = p3$plot,
filename = here(path_eval, "TSSfKAP_algo.png"),
width = 1000,
height = 800,
res = 200,
units = "px",
device = "png",
limitsize = F
)
p4 <- bm_PlotEvalMean_gm(
bm.out      = spec_models,
metric.eval = c("KAPPA","TSS"),
group.by    = "run",
dataset = "calibration",
main = NULL,
ylim = c(0, 1),
xlim = c(0, 1)
)
saveRDS(p4, here(path_eval, "TSSfKAP_runs.rds"))
ggexport(
plot = p4$plot,
filename = here(path_eval, "TSSfKAP_runs.png"),
width = 1000,
height = 800,
res = 200,
units = "px",
device = "png",
limitsize = F
)
(spec_models_var_import <- get_variables_importance(spec_models))
# calculate the mean of variable importance by algorithm
var_importance <- dcast(
spec_models_var_import,
expl.var ~ algo,
fun.aggregate = mean,
value.var = "var.imp"
)
# calculate the mean of variable importance by algorithm
(spec_models_var_import <- get_variables_importance(spec_models))
var_importance <- dcast(
spec_models_var_import,
expl.var ~ algo,
fun.aggregate = mean,
value.var = "var.imp"
)
var_importance
p5 <- ggplot() +
geom_col(
data = var_importance,
aes(
x = expl.var %>%
factor(
levels = expl.var[order(get(alg), decreasing = T)]
),
y = get(alg)
)
) +
xlab("Variable environnementale") +
ylab("Contribution (%)")
p5
var_importance
p5 <- ggplot() +
geom_col(
data = var_importance,
aes(
x = expl.var %>%
factor(
levels = expl.var[order(get(all_biomod2_algos), decreasing = T)]
),
y = get(all_biomod2_algos)
)
) +
xlab("Variable environnementale") +
ylab("Contribution (%)")
p5
all_biomod2_algos
expl.var
var_importance
var_importance_ens <- var_importance %>%
add_column(median = apply(., 1, median))
var_importance_ens
var_importance_ens <- var_importance %>%
add_column(median = apply(.[, -1], 1, median))
var_importance_ens
ggplot(
data = var_importance,
aes(
x = expl.var %>%
factor(
levels = expl.var[order("median", decreasing = T)]
),
y = get(alg)
)
) +
geom_boxplot()
var_importance_ens
var_importance_ens <- var_importance %>%
add_column(median = apply(.[, -1], 1, median)) %>%
melt()
var_importance_ens
ggplot(
data = var_importance_ens,
aes(x = expl.var, y = value)
) +
geom_boxplot()
var_importance_ens <- var_importance %>%
add_column(median = apply(.[, -1], 1, median))
var_importance_ens
var_importance_ens$expl.var
var_importance_ens <- var_importance %>%
add_column(median = apply(.[, -1], 1, median))
var_importance_ens$expl.var <- factor(
var_importance_ens$expl.var,
levels = var_importance_ens$expl.var[
order(sort(var_importance_ens$median), decreasing = T)
]
)
var_importance_ens
var_importance_ens
var_importance_ens$expl.var
sort(var_importance_ens$median)
var_importance_ens$median
order(var_importance_ens$median, decreasing = T)
var_importance_ens <- var_importance %>%
add_column(median = apply(.[, -1], 1, median))
var_importance_ens$expl.var <- factor(
var_importance_ens$expl.var,
levels = var_importance_ens$expl.var[
order(var_importance_ens$median, decreasing = T)
]
)
var_importance_ens
var_importance_ens$expl.var[
order(var_importance_ens$median, decreasing = T)
]
var_importance_ens$expl.var
ggplot(
data = var_importance_ens,
aes(
x = expl.var,
y = value
)
) +
geom_boxplot()
var_importance_ens <- var_importance_ens %>%
melt()
var_importance_ens
var_importance_ens <- var_importance %>%
add_column(median = apply(.[, -1], 1, median))
var_importance_ens$expl.var <- factor(
var_importance_ens$expl.var,
levels = var_importance_ens$expl.var[
order(var_importance_ens$median, decreasing = T)
]
)
var_importance_ens <- var_importance_ens %>%
select(-median) %>%
melt()
var_importance_ens
ggplot(
data = var_importance_ens,
aes(
x = expl.var,
y = value
)
) +
geom_boxplot()
ggplot(
data = var_importance_ens,
aes(
x = expl.var,
y = value * 100
)
) +
geom_boxplot() +
xlab("Variable environnementale") +
ylab("Contribution (%)")
ggplot(
data = var_importance_ens,
aes(
x = expl.var,
y = value * 100
)
) +
geom_boxplot() +
xlab("Variable environnementale (médiane décroissante)") +
ylab("Contribution (%)")
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/FUN/FUN_sdmOneAlgo.R", echo=TRUE)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/sdm_1algo_Claremontiella_nodulosa_4A_02_local_sextant.R", echo=TRUE)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/FUN/FUN_sdmOneAlgo.R", echo=TRUE)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/sdm_1algo_Claremontiella_nodulosa_4A_02_local_sextant.R", echo=TRUE)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/boot.R", echo=TRUE)
sxt_sub_means
# Tant que je n'ai pas refait tourner les codes pour C. nodulosa
names(clim_global2$Muricoidea$Claremontiella_nodulosa) <-
gsub("NULL", "mean", names(clim_global2$Muricoidea$Claremontiella_nodulosa))
cgc_sub <- mapply(
\(supfm, spe) {
tb <- clim_global2[[supfm]][[spe]]
tb <- tb %>%
select(names(.)[grepl("stdv|mean", names(.))])
tbl <- list(tb)
names(tbl) <- spe
return(tbl)
},
superFamilies,
species,
SIMPLIFY = F,
USE.NAMES = T
)
cgc_sub
cgc_sub <- mapply(
\(supfm, spe) {
tb <- cgc_sub[[supfm]][[spe]]
var_col <- usdm::vifstep(as.data.frame(tb %>% na.omit()))@excluded
tb <- tb[, !names(tb) %in% var_col]
tbl <- list(tb)
names(tbl) <- spe
return(tbl)
},
superFamilies,
species,
SIMPLIFY = F,
USE.NAMES = T
)
cgc_sub
# sextant local climatologies
sxt_sub <- climosaic %>%
terra::subset(names(.)[grepl("ssm|tur|chla|sst", names(.))])
sxt_sub
x11(); plot(sxt_sub)
x11(); plot(sxt_sub$mean.chla)
x11(); plot(sxt_sub$mean.sst)
x11(); plot(sxt_sub$stdv.sst)
x11(); plot(hab_sub$depth)
pa$`Amphithrax hemphilli`
# PARAMÉTRAGE ####
# "GLM", "GBM", "GAM", "CTA", "ANN", "SRE",
# "FDA", "MARS", "RF", "MAXENT", "MAXNET"
# alg <- "RF"
# alg <- "MAXENT"
alg <- "ENS"
# Nombre de répétitions (nombre de jeux de validation croisées)
CV_nb_rep <- 5
# nom du modèle
vec_name_model <- c(paste0(tolower(alg), CV_nb_rep), "02", "local", "sxt")
pts_name_model <- paste(vec_name_model, collapse = ".")
# jeux de données environnementales pour calibration du SDM ----
# carte globale des variables environnementales
clim_sub      <- sxt_sub
clim_proj_sub <- clim_sub
# Données biologiques ----
bn <- "Claremontiella nodulosa"
sp  <- pa[[bn]] %>% as.data.frame(xy = T)
binnam <- str_split(bn, " ")[[1]] %>%
lapply(substr, 1, 3) %>%
paste0(collapse = ".")
# Données locales ----
# Présences ----
spp_local <- sp %>%
filter(individualCount > 0) %>%
cbind(type = "pr", id = paste0("pr", 1:nrow(.)), scale = "local") %>%
select(type, id, scale, x, y, individualCount)
spp_local_sf <- st_as_sf(
spp_local,
coords = c("x", "y"),
remove = F,
crs = "EPSG:4326"
)
spp_local_sf <- spp_local_sf %>%
cbind(terra::extract(clim_proj_sub, spp_local_sf, ID = F))
# Absences ----
spa_local <- sp %>%
filter(individualCount == 0) %>%
cbind(type = "ab", id = paste0("ab", 1:nrow(.)), scale = "local") %>%
select(type, id, scale, x, y, individualCount)
spa_local_sf <- st_as_sf(
spa_local,
coords = c("x", "y"),
remove = F,
crs = "EPSG:4326"
)
spa_local_sf <- spa_local_sf %>%
cbind(terra::extract(clim_proj_sub, spa_local_sf, ID = F))
# Aggrégation données biologiques ----
bio_list <- list(spp_local_sf, spa_local_sf)
bio <- do.call(rbind, bio_list)
bio <- bio %>%
arrange(desc(individualCount), type)
bio
View(bio)
islands
maps$GLP
ggplot() + geom_sf(data = maps$GLP) + geom_sf(data = bio %>% st_crop(st_bbox(maps$GLP)))
names(bio)
table(bio$type)
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type)
) +
guides(col = guide_legend(title = NULL, label = c("Absence", "Présence")))
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type)
)
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type)
) +
guides(col = guide_legend(title = NULL, label = c("Absence", "Présence")))
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type)
) +
scale_color_manual(
values = c("grey", "blue"), labels = c("Absence", "Présence")
)
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type, alpha = type)
) +
scale_color_manual(
values = c("grey", "blue"), labels = c("Absence", "Présence")
) +
scale_alpha_manual(values = c(0.6, 1))
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type, alpha = type)
) +
scale_color_manual(
values = c("grey", "blue"), labels = c("Absence", "Présence")
) +
scale_alpha_manual(values = c(0.6, 1), labels = c("Absence", "Présence"))
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type, alpha = type)
) +
scale_color_manual(
values = c("grey", "blue"), labels = c("Absence", "Présence")
) +
scale_alpha_manual(values = c(0.6, 1), labels = c("Absence", "Présence")) +
theme(legend.title = "none")
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type, alpha = type)
) +
scale_color_manual(
values = c("grey", "blue"), labels = c("Absence", "Présence")
) +
scale_alpha_manual(values = c(0.6, 1), labels = c("Absence", "Présence")) +
theme(legend.title = element_blank())
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type, alpha = type)
) +
scale_color_manual(
values = c("grey", "blue"), labels = c("Absence", "Présence")
) +
scale_alpha_manual(values = c(0.6, 1), labels = c("Absence", "Présence")) +
theme(legend.title = element_blank()) +
theme_map()
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type, alpha = type)
) +
scale_color_manual(
values = c("grey", "blue"), labels = c("Absence", "Présence")
) +
scale_alpha_manual(values = c(0.6, 1), labels = c("Absence", "Présence")) +
theme_map() +
theme(legend.title = element_blank())
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type, alpha = type)
) +
scale_color_manual(
values = c("pink", "blue"), labels = c("Absence", "Présence")
) +
scale_alpha_manual(values = c(0.6, 1), labels = c("Absence", "Présence")) +
theme_map() +
theme(legend.title = element_blank())
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type, alpha = type)
) +
scale_color_manual(
values = c("pink3", "blue"), labels = c("Absence", "Présence")
) +
scale_alpha_manual(values = c(0.6, 1), labels = c("Absence", "Présence")) +
theme_map() +
theme(legend.title = element_blank())
ggplot() +
geom_sf(data = maps$GLP) +
geom_sf(
data = bio %>% st_crop(st_bbox(maps$GLP)),
aes(col = type, alpha = type)
) +
scale_color_manual(
values = c("pink2", "blue"), labels = c("Absence", "Présence")
) +
scale_alpha_manual(values = c(0.6, 1), labels = c("Absence", "Présence")) +
theme_map() +
theme(legend.title = element_blank())
