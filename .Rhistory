pocc <- if(nisl == "MTQ") {
pocc +
theme(
axis.title.y = element_blank(),
axis.line.y  = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()
)
} else {
pocc + theme(legend.position = "none")
}
return(list(nocc = p, pocc = pocc))
}
)
P    <- Reduce(`+`, ps %>% lapply(pluck, 1))
Pocc <- Reduce(`+`, ps %>% lapply(pluck, 2))
file_name <- modeling_id %>%
paste("ANT", EMalg, "incidence", "map", sep = "_") %>%
paste0(".png")
file_name_occ <- modeling_id %>%
paste("ANT", EMalg, "incidence", "map", "occ", sep = "_") %>%
paste0(".png")
ggexport(
plot = P,
filename = here(path_figEM, file_name),
width = 4200,
height = 2000,
res = 200,
units = "px",
device = "png",
limitsize = F
)
ggexport(
plot = Pocc,
filename = here(path_figEM, file_name_occ),
width = 4200,
height = 2000,
res = 200,
units = "px",
device = "png",
limitsize = F
)
},
names(spec_proj_current_spatRast)[-1],
thlds[-1],
SIMPLIFY = F,
USE.NAMES = T
)
all_ensemble_algos
spec_ensemble_models_scores
a <- all_ensemble_algos[[1]]
a
# a <- all_ensemble_algos[[1]]
spec_ensemble_models_scores %>%
filter(algo == a) %>%
select(all_of(ensemble_scores_names))
a <- all_ensemble_algos[[2]]
# a <- all_ensemble_algos[[2]]
spec_ensemble_models_scores %>%
filter(algo == a) %>%
select(all_of(ensemble_scores_names))
View(spec_ensemble_models_scores)
spec_ensemble_models_scores
spec_ensemble_models_scores %>% names()
# a <- all_ensemble_algos[[2]]
spec_ensemble_models_scores %>%
filter(algo == a) %>%
select(all_of(ensemble_scores_names)) %>%
groub_by("metric.eval") %>%
summarise(cutoff = max(cutoff))
# ensemble scores ----
EMscores <- all_ensemble_algos %>% lapply(
\(a) {
# a <- all_ensemble_algos[[2]]
spec_ensemble_models_scores %>%
filter(algo == a) %>%
select(all_of(ensemble_scores_names)) %>%
groub_by("metric.eval") %>%
summarise(cutoff = max(cutoff))
}
)
# ensemble scores ----
EMscores <- all_ensemble_algos %>% lapply(
\(a) {
# a <- all_ensemble_algos[[2]]
spec_ensemble_models_scores %>%
filter(algo == a) %>%
select(all_of(ensemble_scores_names)) %>%
group_by("metric.eval") %>%
summarise(cutoff = max(cutoff))
}
)
EMscores
spec_ensemble_models_scores %>%
filter(algo == a) %>%
select(all_of(ensemble_scores_names))
spec_ensemble_models_scores %>%
filter(algo == a) %>%
select(all_of(ensemble_scores_names)) %>% haed()
spec_ensemble_models_scores %>%
filter(algo == a) %>%
select(all_of(ensemble_scores_names)) %>% head()
# ensemble scores ----
EMscores <- all_ensemble_algos %>% lapply(
\(a) {
# a <- all_ensemble_algos[[2]]
spec_ensemble_models_scores %>%
filter(algo == a) %>%
select(all_of(ensemble_scores_names)) %>%
group_by(metric.eval) %>%
summarise(cutoff = max(cutoff))
}
)
EMscores
EMscores
EMscores
names(spec_proj_current_spatRast)[-1]
names(spec_proj_current_spatRast)
class(spec_proj_current_spatRast)
spec_proj_current_spatRast
spec_ensemble_models_proj_current
spec_ensemble_models_proj_current@proj.out@val
spec_ensemble_models_proj_current
strspec_ensemble_models_proj_current
str(spec_ensemble_models_proj_current)
View(spec_ensemble_models_proj_current)
names(spec_proj_current_spatRast)
str_split(
names(spec_proj_current_spatRast), "_"
)
str_split(
names(spec_proj_current_spatRast), "_"
) %>% lapply(pluck, 2)
str_split(
names(spec_proj_current_spatRast), "_"
) %>% lapply(pluck, 2) %>% unlist()
names(spec_proj_current_spatRast) <- str_split(
names(spec_proj_current_spatRast), "_"
) %>% lapply(pluck, 2) %>% unlist()
which(grepl("ca", names(spec_proj_current_spatRast)))
spc_list <- list(
ca = terra::subset(
spec_proj_current_spatRast, names(spec_proj_current_spatRast)[
which(grepl("ca", names(spec_proj_current_spatRast)))
]
),
cv = terra::subset(
spec_proj_current_spatRast, names(spec_proj_current_spatRast)[
which(grepl("cv", names(spec_proj_current_spatRast)))
]
),
wmean = terra::subset(
spec_proj_current_spatRast, names(spec_proj_current_spatRast)[
which(grepl("wmean", names(spec_proj_current_spatRast)))
]
)
)
x <- spc_list$ca
str_split(names(x), "by") %>% lapply(pluck, 2) %>% unlist()
str_split(names(x), "by")
str_split(names(x), "By")
str_split(names(x), "By") %>% lapply(pluck, 2) %>% unlist()
spc_list <- lapply(
spc_list,
\(x) {
names(x) <- str_split(names(x), "By") %>% lapply(pluck, 2) %>% unlist()
return(x)
}
)
spc_list
spc_list$ca$TSS
spc_list$ca$KAPPA
# Visualisation ----
# plot(spec_ensemble_models_proj_current)
spc_rast <- terra::unwrap(
spec_ensemble_models_proj_current@proj.out@val
)
names(spc_rast) <- str_split(
names(spc_rast), "_"
) %>% lapply(pluck, 2) %>% unlist()
spc_list <- list(
ca = terra::subset(
spc_rast, names(spc_rast)[
which(grepl("ca", names(spc_rast)))
]
),
cv = terra::subset(
spc_rast, names(spc_rast)[
which(grepl("cv", names(spc_rast)))
]
),
wmean = terra::subset(
spc_rast, names(spc_rast)[
which(grepl("wmean", names(spc_rast)))
]
)
)
spc_list <- lapply(
spc_list,
\(x) {
names(x) <- str_split(names(x), "By") %>% lapply(pluck, 2) %>% unlist()
return(x)
}
)
spc_list <- list(
ca = terra::subset(
spc_rast, names(spc_rast)[
which(grepl("ca", names(spc_rast)))
]
),
cv = terra::subset(
spc_rast, names(spc_rast)[
which(grepl("cv", names(spc_rast)))
]
),
wmean = terra::subset(
spc_rast, names(spc_rast)[
which(grepl("wmean", names(spc_rast)))
]
)
)
spc_list <- lapply(
spc_list,
\(x) {
names(x) <- str_split(names(x), "By") %>%
lapply(pluck, 2) %>% unlist() %>% tolower()
return(x)
}
)
path_EM <- here(path_modid, "transfert")
makeMyDir(path_EM)
path_figEM <- here(path_EM, "figures")
makeMyDir(path_figEM)
path_layEMpo <- here(path_EM, "layers_po") # probabilitÃ© d'occurrence
makeMyDir(path_layEMpo)
path_layEMpa <- here(path_EM, "layers_pa") # presence absence
makeMyDir(path_layEMpa)
?lapply
X <- spc_list
X <- spc_list
DEPTH <- c("EMalgo", "MEalgo")
l <- length(DEPTH)
names(spc_rast)
names(spc_list)
names(spc_list)[which(grepl("ca|wmean", names(spc_list)))]
EMalg <- names(spc_rast)[1]
names(spc_list[[EMalg]])
EMalg
EMalg <- names(spc_list)[1]
names(spc_list[[EMalg]])
ens_alg <- names(spc_list)[1]
names(spc_list[[ens_alg]])
# ens_alg <- names(spc_list)[1]
lapply(
names(spc_list[[ens_alg]]),
\(evl_met) # Evaluation metric
evl_met <- names(spc_list[[ens_alg]])[[1]]
)
evl_met
evl_met
# ens_alg <- names(spc_list)[1]
lapply(
names(spc_list[[ens_alg]]),
\(evl_met) # Evaluation metric
evl_met <- names(spc_list[[ens_alg]])[[1]]
)
# ens_alg <- names(spc_list)[1]
lapply(
names(spc_list[[ens_alg]]),
\(evl_met) # Evaluation metric
evl_met <- names(spc_list[[ens_alg]])[1]
)
names(spc_list[[ens_alg]])[1]
evl_met
# ens_alg <- names(spc_list)[1]
lapply(
names(spc_list[[ens_alg]]),
\(evl_met) # Evaluation metric
evl_met <- names(spc_list[[ens_alg]])[1]
)
evl_met <- names(spc_list[[ens_alg]])[1]
evl_met
spc_list$ca$kappa
# ens_alg <- names(spc_list)[1]
lapply(
names(spc_list[[ens_alg]]),
\(evl_met)                                    # Evaluation metric
# evl_met <- names(spc_list[[ens_alg]])[1]
# Sauvegarde en .tif
sr <- spc_list[[ens_alg]][[evl_met]]
writeRaster(sr, here(path_layEMpo, nm %>% paste0(".tif")))
# sauvegarde aux formats .shp et .tif
lapply(
c("ca", "wmean"),                                 # Ensemble algorithm
\(ens_alg) {
# ens_alg <- names(spc_list)[1]
path_ens_alg <- here(path_layEMpo)
makeMyDir(path_ens_alg)
lapply(
names(spc_list[[ens_alg]]),
\(evl_met)                                    # Evaluation metric
# evl_met <- names(spc_list[[ens_alg]])[1]
path_evl_met <- here(path_ens_alg)
makeMyDir(path_evl_met)
# sauvegarde aux formats .shp et .tif
lapply(
c("ca", "wmean"),                                 # Ensemble algorithm
\(ens_alg) {
# ens_alg <- names(spc_list)[1]
path_ens_alg <- here(path_layEMpo)
makeMyDir(path_ens_alg)
lapply(
names(spc_list[[ens_alg]]),
\(evl_met)                                    # Evaluation metric
# evl_met <- names(spc_list[[ens_alg]])[1]
path_evl_met <- here(path_ens_alg, evl_met)
makeMyDir(path_evl_met)
# sauvegarde aux formats .shp et .tif
lapply(
c("ca", "wmean"),                                 # Ensemble algorithm
\(ens_alg) {
# ens_alg <- names(spc_list)[1]
path_ens_alg <- here(path_layEMpo)
makeMyDir(path_ens_alg)
lapply(
names(spc_list[[ens_alg]]),
\(evl_met) {                                  # Evaluation metric
# evl_met <- names(spc_list[[ens_alg]])[1]
path_evl_met <- here(path_ens_alg, evl_met)
makeMyDir(path_evl_met)
# Sauvegarde en .tif
sr <- spc_list[[ens_alg]][[evl_met]]
writeRaster(sr, here(path_layEMpo, nm %>% paste0(".tif")))
# Sauvegarde en .shp (trop chronophage)
# sf <- st_as_stars(sr) %>% st_as_sf()
# st_write(sf, here(path_layEMpo, nm %>% paste0(".shp")))
})
})
modeling_id
paste(modeling_id, ens_alg, evl_met, sep = "_") %>% paste0(".tif"))
paste(modeling_id, ens_alg, evl_met, sep = "_") %>% paste0(".tif")
writeRaster(
sr, here(
path_evl_met,
paste(
modeling_id,
paste("EM", ens_alg, sep = "-"),
paste("cutoff", evl_met, sep = "-"),
sep = "_"
) %>% paste0(".tif")
here(
here(
path_evl_met,
paste(
modeling_id,
paste("EM", ens_alg, sep = "-"),
paste("cutoff", evl_met, sep = "-"),
sep = "_"
) %>% paste0(".tif")
)
# evl_met <- names(spc_list[[ens_alg]])[1]
path_evl_met <- here(path_ens_alg, evl_met)
makeMyDir(path_evl_met)
# ens_alg <- names(spc_list)[1]
path_ens_alg <- here(path_layEMpo)
makeMyDir(path_ens_alg)
# evl_met <- names(spc_list[[ens_alg]])[1]
path_evl_met <- here(path_ens_alg, evl_met)
makeMyDir(path_evl_met)
here(
path_evl_met,
paste(
modeling_id,
paste("EM", ens_alg, sep = "-"),
paste("cutoff", evl_met, sep = "-"),
sep = "_"
) %>% paste0(".tif")
)
writeRaster(
sr, here(
path_evl_met,
paste(
modeling_id,
paste0("EM", ens_alg),
paste0("BY", evl_met),
sep = "_"
) %>% paste0(".tif")
)
# Sauvegarde en .shp (trop chronophage)
# sf <- st_as_stars(sr) %>% st_as_sf()
# st_write(sf, here(path_layEMpo, nm %>% paste0(".shp")))
})
paste(
modeling_id,
paste0("EM", ens_alg),
paste0("BY", evl_met),
sep = "_"
) %>% paste0(".tif")
})
# sauvegarde aux formats .shp et .tif
lapply(
c("ca", "wmean"),                                 # Ensemble algorithm
\(ens_alg) {
# ens_alg <- names(spc_list)[1]
path_ens_alg <- here(path_layEMpo)
makeMyDir(path_ens_alg)
lapply(
names(spc_list[[ens_alg]]),
\(evl_met) {                                  # Evaluation metric
# evl_met <- names(spc_list[[ens_alg]])[1]
path_evl_met <- here(path_ens_alg, evl_met)
makeMyDir(path_evl_met)
# Sauvegarde en .tif
sr <- spc_list[[ens_alg]][[evl_met]]
writeRaster(
sr, here(
path_evl_met,
paste(
modeling_id,
paste0("EM", ens_alg),
paste0("BY", evl_met),
sep = "_"
) %>% paste0(".tif")
)
)
# Sauvegarde en .shp (trop chronophage)
# sf <- st_as_stars(sr) %>% st_as_sf()
# st_write(sf, here(path_layEMpo, nm %>% paste0(".shp")))
})
})
spec_ensemble_models_proj_current <- readRDS(
here("data", "analysis", "models", "Majoidea", "Stenorhynchus seticornis", "Ste.set.ens5.01.global.cpc",
"proj_forecast_ssp126", "proj_ipcc.rds")
)
path_modid <- here("figures", "essai_ste.set")
path_modid %>% makeMyDir()
bio <- readRDS(here("data", "tidy", "bio", "Majoidea", "Stenorhynchus seticornis", "bio_local.rds"))
modeling_id <- "Ste.set.ens5.01.global.cpc.proj.ssp126"
# Visualisation ----
# plot(spec_ensemble_models_proj_current)
spc_rast <- terra::unwrap(
spec_ensemble_models_proj_current@proj.out@val
)
names(spc_rast) <- str_split(
names(spc_rast), "_"
) %>% lapply(pluck, 2) %>% unlist()
spc_list <- list(
ca = terra::subset(
spc_rast, names(spc_rast)[
which(grepl("ca", names(spc_rast)))
]
),
cv = terra::subset(
spc_rast, names(spc_rast)[
which(grepl("cv", names(spc_rast)))
]
),
wmean = terra::subset(
spc_rast, names(spc_rast)[
which(grepl("wmean", names(spc_rast)))
]
)
)
spc_list <- lapply(
spc_list,
\(x) {
names(x) <- str_split(names(x), "By") %>%
lapply(pluck, 2) %>% unlist() %>% tolower()
return(x)
}
)
# chemins de sauvegarde
path_EM <- here(path_modid, "transfert")
makeMyDir(path_EM)
path_figEM <- here(path_EM, "figures")
makeMyDir(path_figEM)
path_layEMpo <- here(path_EM, "layers_po") # probabilitÃ© d'occurrence
makeMyDir(path_layEMpo)
path_layEMpa <- here(path_EM, "layers_pa") # presence absence
makeMyDir(path_layEMpa)
# sauvegarde aux formats .shp et .tif
lapply(
c("ca", "wmean"),                                 # Ensemble algorithm
\(ens_alg) {
# ens_alg <- names(spc_list)[1]
path_ens_alg <- here(path_layEMpo, ens_alg)
makeMyDir(path_ens_alg)
lapply(
names(spc_list[[ens_alg]]),
\(evl_met) {                                  # Evaluation metric
# evl_met <- names(spc_list[[ens_alg]])[1]
path_evl_met <- here(path_ens_alg, evl_met)
makeMyDir(path_evl_met)
# Sauvegarde en .tif
sr <- spc_list[[ens_alg]][[evl_met]]
writeRaster(
sr,
here(
path_evl_met,
paste(
modeling_id,
paste0("EM", ens_alg),
paste0("BY", evl_met),
sep = "_"
) %>% paste0(".tif")
)
)
# Sauvegarde en .shp (trop chronophage)
# sf <- st_as_stars(sr) %>% st_as_sf()
# st_write(sf, here(path_layEMpo, nm %>% paste0(".shp")))
})
})
