alg <- "MAXENT"
# Nombre de répétitions (nombre de jeux de validation croisées)
CV_nb_rep <- 5
# nom du modèle
vec_name_model <- c(paste0(tolower(alg), CV_nb_rep), "02", "local", "sxt")
pts_name_model <- paste(vec_name_model, collapse = ".")
# Claremontiella nodulosa
# jeux de données environnementales pour calibration du SDM ----
# carte globale des variables environnementales
clim_sub      <- sxt_sub
clim_proj_sub <- clim_sub
# Données biologiques ----
bn <- "Claremontiella nodulosa"
sp  <- pa[[bn]] %>% as.data.frame(xy = T)
binnam <- str_split(bn, " ")[[1]] %>%
lapply(substr, 1, 3) %>%
paste0(collapse = ".")
# Données locales ----
# Présences ----
spp_local <- sp %>%
filter(individualCount > 0) %>%
cbind(type = "pr", id = paste0("pr", 1:nrow(.)), scale = "local") %>%
select(type, id, scale, x, y, individualCount)
spp_local_sf <- st_as_sf(
spp_local,
coords = c("x", "y"),
remove = F,
crs = "EPSG:4326"
)
spp_local_sf <- spp_local_sf %>%
cbind(terra::extract(clim_proj_sub, spp_local_sf, ID = F))
# Absences ----
spa_local <- sp %>%
filter(individualCount == 0) %>%
cbind(type = "ab", id = paste0("ab", 1:nrow(.)), scale = "local") %>%
select(type, id, scale, x, y, individualCount)
spa_local_sf <- st_as_sf(
spa_local,
coords = c("x", "y"),
remove = F,
crs = "EPSG:4326"
)
spa_local_sf <- spa_local_sf %>%
cbind(terra::extract(clim_proj_sub, spa_local_sf, ID = F))
# Aggrégation données biologiques ----
bio_list <- list(spp_local_sf, spa_local_sf)
bio <- do.call(rbind, bio_list)
bio <- bio %>%
arrange(desc(individualCount), type)
# sauvegarde des données biologiques
saveRDS(
bio,
here("data", "analysis", "bio_data_sxt.rds")
)
################################################################################
#### MODÈLE LOCAL - DONNÉES HABITAT                                         ####
################################################################################
# PARAMÉTRAGE ####
# "GLM", "GBM", "GAM", "CTA", "ANN", "SRE",
# "FDA", "MARS", "RF", "MAXENT", "MAXNET"
alg <- "MAXENT"
# Nombre de répétitions (nombre de jeux de validation croisées)
CV_nb_rep <- 5
# nom du modèle
vec_name_model <- c(paste0(tolower(alg), CV_nb_rep), "03", "local", "hab")
pts_name_model <- paste(vec_name_model, collapse = ".")
# Claremontiella nodulosa
# jeux de données environnementales pour calibration du SDM ----
# carte globale des variables environnementales
clim_sub      <- hab_sub
clim_proj_sub <- clim_sub
# Données biologiques ----
bn <- "Claremontiella nodulosa"
sp  <- pa[[bn]] %>% as.data.frame(xy = T)
binnam <- str_split(bn, " ")[[1]] %>%
lapply(substr, 1, 3) %>%
paste0(collapse = ".")
# Données locales ----
# Présences ----
spp_local <- sp %>%
filter(individualCount > 0) %>%
cbind(type = "pr", id = paste0("pr", 1:nrow(.)), scale = "local") %>%
select(type, id, scale, x, y, individualCount)
spp_local_sf <- st_as_sf(
spp_local,
coords = c("x", "y"),
remove = F,
crs = "EPSG:4326"
)
spp_local_sf <- spp_local_sf %>%
cbind(terra::extract(clim_proj_sub, spp_local_sf, ID = F))
# Absences ----
spa_local <- sp %>%
filter(individualCount == 0) %>%
cbind(type = "ab", id = paste0("ab", 1:nrow(.)), scale = "local") %>%
select(type, id, scale, x, y, individualCount)
spa_local_sf <- st_as_sf(
spa_local,
coords = c("x", "y"),
remove = F,
crs = "EPSG:4326"
)
spa_local_sf <- spa_local_sf %>%
cbind(terra::extract(clim_proj_sub, spa_local_sf, ID = F))
# Aggrégation données biologiques ----
bio_list <- list(spp_local_sf, spa_local_sf)
bio <- do.call(rbind, bio_list)
bio <- bio %>%
arrange(desc(individualCount), type)
# sauvegarde des données biologiques
saveRDS(
bio,
here("data", "analysis", "bio_data_hab.rds")
)
list.files(here("data", "analysis"), pattern = "bio_data")
bios <- lapply(
list.files(here("data", "analysis"), pattern = "bio_data", full.names = T),
readRDS
)
bios
lapply(bios, dil)
lapply(bios, dim)
names(bios[[1]])
names(bios[[2]])
bios <- lapply(
list.files(here("data", "analysis"), pattern = "bio_data", full.names = T),
\(p) {
d <- readRDS(p)
d %>%
st_drop_geometry() %>%
filter(scale == "local") %>%
select(-c(type, id, scale, x, y, individualCount))
}
)
bios
lapply(bios, dim)
bios <- lapply(
list.files(here("data", "analysis"), pattern = "bio_data", full.names = T),
\(p) {
d <- readRDS(p)
d %>%
st_drop_geometry() %>%
filter(scale == "local") %>%
filter(type == "pr") %>%
select(-c(type, id, scale, x, y, individualCount))
}
)
lapply(bios, dim)
bios <- do.call(
cbind,
lapply(
list.files(here("data", "analysis"), pattern = "bio_data", full.names = T),
\(p) {
d <- readRDS(p)
d %>%
st_drop_geometry() %>%
filter(scale == "local") %>%
filter(type == "pr") %>%
select(-c(type, id, scale, x, y, individualCount))
}
)
)
bios
View(bios)
dim(bios)
mods_vals$wmean <- append(mods_vals$wmean, list(observed = env_local))
mods_vals$ca <- append(mods_vals$ca, list(observed = env_local))
lapply(mods_vals$wmean, dim)
mods_vals$wmean <- append(mods_vals$wmean, list(observed = bios))
mods_vals$ca <- append(mods_vals$ca, list(observed = bios))
lapply(mods_vals$wmean, dim)
bios <- do.call(
cbind,
lapply(
list.files(here("data", "analysis"), pattern = "bio_data", full.names = T),
\(p) {
d <- readRDS(p)
d %>%
st_drop_geometry() %>%
filter(scale == "local") %>%
filter(type == "pr") %>%
select(-c(type, id, scale, x, y, individualCount))
}
)
)
dim(bios)
mods_vals$wmean <- append(mods_vals$wmean, list(observed = bios))
mods_vals$ca <- append(mods_vals$ca, list(observed = bios))
# valeurs des niches modélisées
mods_vals <- sapply(
names(mods),
\(alg_mod) {
sapply(
names(mods[[alg_mod]]),
\(alg_cmp) {
x <- mods_masks[[alg_mod]][[alg_cmp]]
as.data.frame(x)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
bios <- do.call(
cbind,
lapply(
list.files(here("data", "analysis"), pattern = "bio_data", full.names = T),
\(p) {
d <- readRDS(p)
d %>%
st_drop_geometry() %>%
filter(scale == "local") %>%
filter(type == "pr") %>%
select(-c(type, id, scale, x, y, individualCount))
}
)
)
mods_vals$wmean <- append(mods_vals$wmean, list(observed = bios))
mods_vals$ca <- append(mods_vals$ca, list(observed = bios))
lapply(dim, mods_vals)
lapply(mods_vals, dim)
lapply(mods_vals$wmean, dim)
# comparaison des valeurs des différences niches modélisées et observées
# localement
m <- mods_vals$wmean
names(m$ensemble)
names(m$observed)
m <- lapply(m, \(d) d[, order(sort(names(d)))])
names(m$ensemble)
names(m$observed)
names(mods_vals$wmean$ensemble)
mods_vals <- sapply(
names(mods),
\(alg_mod) {
sapply(
names(mods[[alg_mod]]),
\(alg_cmp) {
x <- mods_masks[[alg_mod]][[alg_cmp]]
as.data.frame(x)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
bios <- do.call(
cbind,
lapply(
list.files(here("data", "analysis"), pattern = "bio_data", full.names = T),
\(p) {
d <- readRDS(p)
d %>%
st_drop_geometry() %>%
filter(scale == "local") %>%
filter(type == "pr") %>%
select(-c(type, id, scale, x, y, individualCount))
}
)
)
bios <- bios[, names(mods_vals$wmean$ensemble)]
mods_vals$wmean <- append(mods_vals$wmean, list(observed = bios))
mods_vals$ca <- append(mods_vals$ca, list(observed = bios))
# comparaison des valeurs des différences niches modélisées et observées
# localement
m <- mods_vals$wmean
names(m$ensemble)
names(m$observed)
m <- do.call(rbind, m)
View(m)
# comparaison des valeurs des différences niches modélisées et observées
# localement
alg_cmp <- "wmean"
m <- mods_vals[[alg_cmp]]
m
m <- lapply(
names(m),
\(alg_mod) {
cbind(alg_cmp, alg_mod, m[[alg_cmp]][[alg_mod]])
}
)
m$
m
m <- mods_vals[[alg_cmp]]
m <- lapply(
names(m),
\(alg_mod) {
e <- cbind(alg_cmp, alg_mod, m[[alg_cmp]][[alg_mod]])
return(e)
}
)
e
m
m[[alg_cmp]][[alg_mod]]
names(m)
m <- mods_vals[[alg_cmp]]
m
names(m)
alg_mod <- "ensemble"
m[[alg_mod]]
m <- lapply(
names(m),
\(alg_mod) {
e <- cbind(alg_cmp, alg_mod, m[[alg_mod]])
return(e)
}
)
m
View(me)
View(m)
View(m[[1]])
m <- do.call(rbind, m)
View(m)
m <- mods_vals[[alg_cmp]]
m <- lapply(
names(m),
\(alg_mod) {
e <- cbind(alg_cmp, alg_mod, m[[alg_mod]])
return(e)
}
)
mm <- do.call(rbind, m) %>%
select(-1) %>%
melt(id.vars = "alg_mod")
mm
head(mm)
# représentation graphique
ggplot(
data = mm,
aes(
x = variable,
y = value,
col = alg_mod,
group = interaction(alg_mod, variable)
)
) +
geom_violin(position = "dodge") +
geom_jitter(
aes(group = interaction(alg_mod, variable)),
position = position_jitterdodge(dodge.width = 0.9),
size = 0.1,
alpha = 0.5
) +
guides(
col  = guide_legend(title = "Algorithme de\nmodélisation")
) +
xlab("Variable environnementale (climatologies)") +
ylab("Valeur")
m <- lapply(
names(m),
\(alg_mod) {
e <- cbind(alg_cmp, alg_mod, m[[alg_mod]])
return(e)
}
)
m <- mods_vals[[alg_cmp]]
m <- lapply(
names(m),
\(alg_mod) {
e <- cbind(alg_cmp, alg_mod, m[[alg_mod]])
return(e)
}
)
# Centrage réduction
mm <- m
# Centrage réduction
mcr <- m
# Centrage réduction
mcr <- m
mcr[, -1] <- mcr[, -1] %>%
apply(2, \(x) {(x - mean(x))/sd(x)}) %>%
as.data.frame()
m <- mods_vals[[alg_cmp]]
m <- lapply(
names(m),
\(alg_mod) {
e <- cbind(alg_cmp, alg_mod, m[[alg_mod]])
return(e)
}
)
# Centrage réduction
mcr <- m
mcr[, -1] <- mcr[, -1] %>%
apply(2, \(x) {(x - mean(x))/sd(x)}) %>%
as.data.frame()
mcr
names(mcr)
mcr
length(mcr)
# comparaison des valeurs des différences niches modélisées et observées
# localement
alg_cmp <- "wmean"
m <- mods_vals[[alg_cmp]]
m <- lapply(
names(m),
\(alg_mod) {
e <- cbind(alg_cmp, alg_mod, m[[alg_mod]])
return(e)
}
)
# Centrage réduction
m <- lapply(
names(m),
\(alg_mod) {
md <- m[[alg_mod]] %>%
apply(2, \(x) {(x - mean(x))/sd(x)}) %>%
as.data.frame()
e <- cbind(alg_cmp, alg_mod, md)
return(e)
}
)
m <- mods_vals[[alg_cmp]]
md <- m[[alg_mod]] %>%
apply(2, \(x) {(x - mean(x))/sd(x)}) %>%
as.data.frame()
e <- cbind(alg_cmp, alg_mod, md)
e$alg_mod <- factor(e$alg_mod)
levels(e$alg_mod)
# comparaison des valeurs des différences niches modélisées et observées
# localement
alg_cmp <- "wmean"
m <- mods_vals[[alg_cmp]]
# Centrage réduction
m <- lapply(
names(m),
\(alg_mod) {
md <- m[[alg_mod]] %>%
apply(2, \(x) {(x - mean(x))/sd(x)}) %>%
as.data.frame()
e <- cbind(alg_cmp, alg_mod, md)
return(e)
}
)
m
length(m)
mm <- do.call(rbind, m) %>%
select(-1) %>%
melt(id.vars = "alg_mod")
head(mm)
mm$alg_mod <- factor(mm$alg_mod)
levels(mm$alg_mod)
levels(mm$alg_mod) <- c("Ensemble", "MAXENT", "Observations", "Forêt Aléatoire")
# représentation graphique
ggplot(
data = mm,
aes(
x = variable,
y = value,
col = alg_mod,
group = interaction(alg_mod, variable)
)
) +
geom_violin(position = "dodge") +
geom_jitter(
aes(group = interaction(alg_mod, variable)),
position = position_jitterdodge(dodge.width = 0.9),
size = 0.1,
alpha = 0.5
) +
guides(
col  = guide_legend(title = "Algorithme de\nmodélisation")
) +
xlab("Variable environnementale (climatologies)") +
ylab("Valeur")
# représentation graphique
ggplot(
data = mm,
aes(
x = variable,
y = value,
col = alg_mod,
group = interaction(alg_mod, variable)
)
) +
geom_violin(position = "dodge") +
# geom_jitter(
#   aes(group = interaction(alg_mod, variable)),
#   position = position_jitterdodge(dodge.width = 0.9),
#   size = 0.1,
#   alpha = 0.5
# ) +
guides(
col  = guide_legend(title = "Algorithme de\nmodélisation")
) +
xlab("Variable environnementale (climatologies)") +
ylab("Valeurs centrées réduites")
# représentation graphique
ggplot(
data = mm,
aes(
x = variable,
y = value,
col = alg_mod,
group = interaction(alg_mod, variable)
)
) +
# geom_violin(position = "dodge") +
geom_boxplot(position = "dodge") +
# geom_jitter(
#   aes(group = interaction(alg_mod, variable)),
#   position = position_jitterdodge(dodge.width = 0.9),
#   size = 0.1,
#   alpha = 0.5
# ) +
guides(
col  = guide_legend(title = "Algorithme de\nmodélisation")
) +
xlab("Variable environnementale (climatologies)") +
ylab("Valeurs centrées réduites")
