e            <- ext(climatologies[[nisl]])
sr_crop      <- terra::crop(sr, e)
tb           <- as.data.frame(sr_crop, xy = T)
names(tb)[3] <- "value"
occ <- bio %>%
filter(individualCount > 0) %>%
st_crop(as.vector(e)[c(1,3,2,4)])
# occ <- spp_sf %>% st_crop(as.vector(e)[c(1,3,2,4)])
# figures ggplot2
p <- ggplot() +
geom_tile(data = tb, aes(x = x, y = y, fill = value >= thld)) +
geom_sf(data = isl) +
scale_fill_manual(
values = c("lightblue", "darkgreen"),
labels = c("Absence", "Présence")
) +
labs(x = "Longitude", y = "Latitude") +
guides(fill = guide_legend(paste0("Seuil = ", thld)))
pocc <- p +
geom_sf(data = occ, col = "red", shape = "+", size = 5)
# nom des fichiers de sauvegarde
file_name <- modeling_id %>%
paste(
"pa", "map",
tolower(nisl), ens_alg, tolower(evl_met),
sep = "_"
) %>% paste0(".png")
file_name_occ <- modeling_id %>%
paste(
"pa", "occ", "map",
tolower(nisl), ens_alg, tolower(evl_met),
sep = "_"
) %>% paste0(".png")
# sauvegarde
ggexport(
plot = p,
filename = here(path_isl, file_name),
width = 1000,
height = 800,
res = 100,
units = "px",
device = "png",
limitsize = F
)
ggexport(
plot = pocc,
filename = here(path_isl, file_name_occ),
width = 1000,
height = 800,
res = 100,
units = "px",
device = "png",
limitsize = F
)
# préparation de la seconde carte sans certains éléments graphiques
p <- if(nisl == "MTQ") {
p +
theme(
axis.title.y = element_blank(),
axis.line.y  = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()
)
} else {
p + theme(legend.position = "none")
}
pocc <- if(nisl == "MTQ") {
pocc +
theme(
axis.title.y = element_blank(),
axis.line.y  = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()
)
} else {
pocc + theme(legend.position = "none")
}
return(list(nocc = p, pocc = pocc))
}
)
P    <- Reduce(`+`, ps %>% lapply(pluck, 1))
Pocc <- Reduce(`+`, ps %>% lapply(pluck, 2))
# noms des fichiers de sauvegarde antilles
file_name <- modeling_id %>%
paste(
"pa", "map", "ant",
ens_alg, tolower(evl_met),
sep = "_"
) %>% paste0(".png")
file_name_occ <- modeling_id %>%
paste(
"pa", "occ", "map", "ant",
ens_alg, tolower(evl_met),
sep = "_"
) %>% paste0(".png")
# dossier antilles
path_isl <- here(path_evl_met, "ANT")
makeMyDir(path_isl)
ggexport(
plot = P,
filename = here(path_isl, file_name),
width = 4200,
height = 2000,
res = 200,
units = "px",
device = "png",
limitsize = F
)
ggexport(
plot = Pocc,
filename = here(path_isl, file_name_occ),
width = 4200,
height = 2000,
res = 200,
units = "px",
device = "png",
limitsize = F
)
})
})
})
clim_list
list.files(path_models_out, full.names = T)
# Chemin vers MAXENT
biom_options <- BIOMOD_ModelingOptions(
MAXENT = list(
path_to_maxent.jar = here("scripts", "maxent", "maxent.jar")
)
)
names(cgc_sub)
names(cgc_sub$Majoidea)
list.files(path_models_out, full.names = T)
climosaic_ssp
# Chargement rasters scénarios
ssp2 <- "ssp585"
# Chargement rasters scénarios
ssp <- "ssp585"
climosaic_ssp2 <- here(
"data", "tidy", "climatologies_ipcc", paste0(ssp, ".rds")
) %>%
readRDS()
names(climosaic_ssp)
names(climosaic_ssp2)
source(here::here("scripts", "boot.R"))
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/popa_import.R")
dis$pa$Majoidea$Mithraculus_coryphe$ens5_ca
dis$pa$Majoidea$Mithraculus_coryphe$ens5_ca %>% plot()
pa <- Reduce(c, dis$pa)
pa
pa <- disp$pa
pa <- dis$pa
paca <- lapply(
pa,
\(x){
lapply(
x,
\(y) {
y %>% lapply(pluck, 1)
}
)
}
)
paca <- lapply(
pa,
\(y) {
y %>% lapply(pluck, 1)
}
)
paca$Majoidea$Amphithrax_hemphilli$sum
Reduce(c, z)
paca <- lapply(
pa,
\(y) {
z <- y %>%
lapply(pluck, 1) %>%
unlist()
Reduce(c, z)
}
)
paca$Majoidea
paca <- Reduce(
c,
lapply(
pa,
\(y) {
z <- y %>%
lapply(pluck, 1) %>%
unlist()
Reduce(c, z)
}
)
)
paca
x11(); plot(paca)
paca
x11(); plot(app(paca, sum))
pawm <- Reduce(
c,
lapply(
pa,
\(y) {
z <- y %>%
lapply(pluck, 2) %>%
unlist()
Reduce(c, z)
}
)
)
x11(); plot(app(pawm, sum))
# probability of occurrences | committee averaging
po <- dis$po
poca <- Reduce(
c,
lapply(
po,
\(y) {
z <- y %>%
lapply(pluck, 1) %>%
unlist()
Reduce(c, z)
}
)
)
x11(); plot(app(poca, sum))
z <- y %>%
lapply(pluck, 2) %>%
unlist()
Reduce(c, z)
powm <- Reduce(
c,
lapply(
po,
\(y) {
z <- y %>%
lapply(pluck, 2) %>%
unlist()
Reduce(c, z)
}
)
)
x11(); plot(app(powm, sum))
# all graphs
x11(); par(mfrow = c(2,2)); plot(pawm); plot(paca); plot(powm); plot(poca)
plot(pawm)
# all graphs
x11(); par(mfrow = c(2,2)); plot(app(pawm, sum)); plot(app(paca, sum)); plot(app(powm, sum)); plot(app(poca, sum))
# all graphs
x11(); par(mfrow = c(2,2)); plot(app(pawm, sum)); plot(app(paca, sum)); plot(app(powm, sum)); plot(app(poca, sum))
# all graphs
x11(); par(mfrow = c(2,2)); plot(app(powm, sum)); plot(app(pawm, sum)); plot(app(poca, sum)); plot(app(paca, sum))
# all graphs
x11(); par(mfrow = c(1,4)); plot(app(powm, sum)); plot(app(pawm, sum)); plot(app(poca, sum)); plot(app(paca, sum))
species$species
bn <- "Stenorhynchus seticornis"
binnam <- bn %>%
str_split(" ") %>%
lapply(substr, 1, 3) %>%
unlist() %>%
paste(collapse = ".")
supfam <- species$superFamily[species$species == bn]
# chemin de sauvegarde général ----
path_compilation <- here("data", "analysis", "compilation_proj")
makeMyDir(path_compilation)
# Filtre de profondeur par connaissance expert...
d   <- hab_sub$depth
bnd <- list.files(
here("data", "analysis", "depth_boundaries"),
pattern = gsub(" ", "_", bn),
full.names = T
) %>% readRDS()
# arrondissons aux dizaines inférieure et supérieure
# bnd[[1]] <- floor(bnd[[1]]/10)*10
# bnd[[2]] <- ceiling(bnd[[2]]/10)*10
dmask <- ifel(d >= bnd[[1]] & d <= bnd[[2]], 1, 0)
# paramètrage ----
algs     <- c(
# "rf5",
# "maxent5",
"ens5",
NULL
)
patterns <- paste(binnam, algs, "0", sep = ".")
here("data", "analysis", "models_mesu", supfam, bn)
list.files(path_models, pattern = my_pattern)
path_models <- here("data", "analysis", "models_mesu", supfam, bn)
my_pattern <- patterns[[1]]
my_name <- algs[[1]]
my_pattern
my_name
list.files(path_models, pattern = my_pattern)
f <- "Ste.set.ens5.01.global.cpc"
list.files(
here(path_models, f, "proj_current"),
pattern = "\\.tif",
full.names = T
) %>%
rast()
list.files(
here(path_models, f, "proj_ssp126"),
pattern = "\\.tif",
full.names = T
) %>%
rast()
list.files(
here(path_models, f, "proj_ssp126"),
pattern = "\\.tif",
full.names = T
)
list.files(
here(path_models, f, "proj_forecast"))
list.files(
here(path_models, f, "proj_forecast_ssp126"),
pattern = "\\.tif",
full.names = T
) %>%
rast()
lapply(
species$species,
\(bn) {
# bn <- "Stenorhynchus seticornis"
binnam <- bn %>%
str_split(" ") %>%
lapply(substr, 1, 3) %>%
unlist() %>%
paste(collapse = ".")
supfam <- species$superFamily[species$species == bn]
# chemin de sauvegarde général ----
path_compilation <- here("data", "analysis", "compilation_proj")
makeMyDir(path_compilation)
# Filtre de profondeur par connaissance expert...
# ... dont les proxy -sont- étaient les 1er et 3ème quartiles des
# distribution de profondeurs des espèces.
d   <- hab_sub$depth
bnd <- list.files(
here("data", "analysis", "depth_boundaries"),
pattern = gsub(" ", "_", bn),
full.names = T
) %>% readRDS()
# arrondissons aux dizaines inférieure et supérieure
# bnd[[1]] <- floor(bnd[[1]]/10)*10
# bnd[[2]] <- ceiling(bnd[[2]]/10)*10
dmask <- ifel(d >= bnd[[1]] & d <= bnd[[2]], 1, 0)
# x11(); plot(dmask)
# paramètrage ----
algs     <- c(
# "rf5",
# "maxent5",
"ens5",
NULL
)
patterns <- paste(binnam, algs, "0", sep = ".")
mapply(
\(my_pattern, my_name) {
# my_pattern <- patterns[[1]]
# my_name <- algs[[1]]
# my_pattern <- patterns[[2]]
# my_name <- algs[[2]]
path_models <- here("data", "analysis", "models_mesu", supfam, bn)
# importation des résultats de modèles ----
proj_currents <- lapply(
list.files(path_models, pattern = my_pattern),
\(f) {
# f <- "Cla.nod.rf5.01.global.cpc"
# f <- "Cla.nod.rf5.02.local.sxt"
# f <- "Cla.nod.rf5.03.local.hab.2"
list.files(
here(path_models, f, "proj_forecast_ssp126"),
pattern = "\\.tif",
full.names = T
) %>%
rast()
}
)
names(proj_currents) <- c("copernicus", "sextant", "habitat")
# Aggrégation par weighted mean
proj_current_wmeans <- lapply(
proj_currents,
\(r) {
subset(r, names(r)[grepl("EMwmeanByTSS", names(r))])
}
)
proj_current_cas <- lapply(
proj_currents,
\(r) {
subset(r, names(r)[grepl("EMcaByTSS", names(r))])
}
)
# stacking
pj_wmean <- Reduce(c, proj_current_wmeans)
pj_ca    <- Reduce(c, proj_current_cas)
# calcul de la moyenne pondérée
vec_weight         <- c(1, 2, 3)
proj_current_wmean <- terra::weighted.mean(pj_wmean, vec_weight)
proj_current_ca    <- terra::weighted.mean(pj_ca, vec_weight)
# importation du modèle d'ensemble utilisé pour obtenir ses évaluations
mods <- lapply(
list.files(path_models, pattern = my_pattern),
\(f) {
print(f)
setwd(here(path_models, f))
p <- list.files(pattern = "ensemble\\.models\\.out")
obj <- load(p)
return(get(obj))
}
)
names(mods) <- c("copernicus", "sextant", "habitat")
mod_evals <- lapply(mods, get_evaluations)
thlds_TSS <- lapply(mod_evals, \(tb) {
tb %>% filter(metric.eval == "TSS") %>% select(algo, cutoff)
})
thlds_TSS_mean <- do.call(rbind, thlds_TSS) %>%
group_by(algo) %>%
summarise(cutoff_mean = ceiling(mean(cutoff)))
# seuil ####
s_wmean <- thlds_TSS_mean$cutoff_mean[2]
s_ca    <- thlds_TSS_mean$cutoff_mean[1]
r_wmean <- ifel(proj_current_wmean > s_wmean, 1, 0)
r_ca    <- ifel(proj_current_ca > s_ca, 1, 0)
# Limites de profondeurs ####
r_wmean_f <- r_wmean*dmask
names(r_wmean_f) <- names(r_wmean)
r_ca_f <- r_ca*dmask
names(r_ca_f) <- names(r_ca)
# Visualisation
# plot(r_wmean)
# plot(r_ca)
# sauvegarde probabilité d'adéquation de l'habitat
path_cpo <- here(path_compilation, "probabilite_occurrence")
makeMyDir(path_cpo)
path_cpo_supfam <- here(path_cpo, supfam)
makeMyDir(path_cpo_supfam)
path_cpos_species <- here(path_cpo_supfam, bn)
makeMyDir(path_cpos_species)
writeRaster(
proj_current_wmean,
here(
path_cpos_species,
paste(
"habitat-suitability",
my_name,
"wmean",
"w" %>% paste0(paste(vec_weight, collapse = "-")),
sep = "_"
) %>%
paste0(".tif")
),
overwrite = T
)
writeRaster(
proj_current_ca,
here(
path_cpos_species,
paste(
"habitat-suitability",
my_name,
"ca",
"w" %>% paste0(paste(vec_weight, collapse = "-")),
sep = "_"
) %>%
paste0(".tif")
),
overwrite = T
)
# sauvegarde présence/absence
path_cpa <- here(path_compilation, "presence_absence")
makeMyDir(path_cpa)
path_cpa_supfam <- here(path_cpa, supfam)
makeMyDir(path_cpa_supfam)
path_cpas_species <- here(path_cpa_supfam, bn)
makeMyDir(path_cpas_species)
writeRaster(
# r_wmean,
r_wmean_f,
here(
path_cpas_species,
paste(
"presence-absence",
my_name,
"wmean",
"s" %>% paste0(s_wmean),
"w" %>% paste0(paste(vec_weight, collapse = "-")),
sep = "_"
) %>%
paste0(".tif")
),
overwrite = T
)
writeRaster(
# r_ca,
r_ca_f,
here(
path_cpas_species,
paste(
"presence-absence",
my_name,
"ca",
"s" %>% paste0(s_ca),
"w" %>% paste0(paste(vec_weight, collapse = "-")),
sep = "_"
) %>%
paste0(".tif")
),
overwrite = T
)
},
patterns,
algs,
SIMPLIFY = F,
USE.NAMES = T
)
}
)
