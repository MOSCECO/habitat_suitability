limits = c(
min(
quantile(neo_data[[varenv]], qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], qtl, na.rm = T)
),
max(
quantile(neo_data[[varenv]], 1 - qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], 1 - qtl, na.rm = T)
)
)
) +
theme_void()
pbox_spe / pbox_env / phst + plot_layout(heights = c(0.1, 0.1, 0.8))
varenv <- names(neo_data)[3]
phst <- ggplot() +
geom_histogram(
data = as.data.frame(clim_sub),
aes(x = get(varenv), y = after_stat(density), fill = "Grille environnementale"),
alpha = myAlpha,
bins = 30
) +
geom_histogram(
data = neo_data,
aes(x = get(varenv), y = after_stat(density), fill = "Occurrences de l'espèce"),
alpha = myAlpha,
bins = 30
) +
scale_fill_manual(values = c("green", "red")) +
xlab(varenv) +
ylab("Densité") +
scale_x_continuous(
limits = c(
min(
quantile(neo_data[[varenv]], qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], qtl, na.rm = T)
),
max(
quantile(neo_data[[varenv]], 1 - qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], 1 - qtl, na.rm = T)
)
)
) +
guides(fill = guide_legend(title = NULL)) +
theme(
text = element_text(size = 15),
legend.position = "bottom"
)
pbox_env <- ggplot() +
geom_boxplot(
data = as.data.frame(clim_sub),
aes(x = get(varenv)),
fill = "green",
col = "darkgreen",
alpha = 0.7
) +
xlab(varenv) +
scale_x_continuous(
limits = c(
min(
quantile(neo_data[[varenv]], qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], qtl, na.rm = T)
),
max(
quantile(neo_data[[varenv]], 1 - qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], 1 - qtl, na.rm = T)
)
)
) +
theme_void()
pbox_spe <- ggplot() +
geom_boxplot(
data = neo_data,
aes(x = get(varenv)),
fill = "red",
col = "darkred",
alpha = 0.7
) +
xlab(varenv) +
scale_x_continuous(
limits = c(
min(
quantile(neo_data[[varenv]], qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], qtl, na.rm = T)
),
max(
quantile(neo_data[[varenv]], 1 - qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], 1 - qtl, na.rm = T)
)
)
) +
theme_void()
pbox_spe / pbox_env / phst + plot_layout(heights = c(0.1, 0.1, 0.8))
varenv <- names(neo_data)[4]
phst <- ggplot() +
geom_histogram(
data = as.data.frame(clim_sub),
aes(x = get(varenv), y = after_stat(density), fill = "Grille environnementale"),
alpha = myAlpha,
bins = 30
) +
geom_histogram(
data = neo_data,
aes(x = get(varenv), y = after_stat(density), fill = "Occurrences de l'espèce"),
alpha = myAlpha,
bins = 30
) +
scale_fill_manual(values = c("green", "red")) +
xlab(varenv) +
ylab("Densité") +
scale_x_continuous(
limits = c(
min(
quantile(neo_data[[varenv]], qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], qtl, na.rm = T)
),
max(
quantile(neo_data[[varenv]], 1 - qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], 1 - qtl, na.rm = T)
)
)
) +
guides(fill = guide_legend(title = NULL)) +
theme(
text = element_text(size = 15),
legend.position = "bottom"
)
pbox_env <- ggplot() +
geom_boxplot(
data = as.data.frame(clim_sub),
aes(x = get(varenv)),
fill = "green",
col = "darkgreen",
alpha = 0.7
) +
xlab(varenv) +
scale_x_continuous(
limits = c(
min(
quantile(neo_data[[varenv]], qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], qtl, na.rm = T)
),
max(
quantile(neo_data[[varenv]], 1 - qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], 1 - qtl, na.rm = T)
)
)
) +
theme_void()
pbox_spe <- ggplot() +
geom_boxplot(
data = neo_data,
aes(x = get(varenv)),
fill = "red",
col = "darkred",
alpha = 0.7
) +
xlab(varenv) +
scale_x_continuous(
limits = c(
min(
quantile(neo_data[[varenv]], qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], qtl, na.rm = T)
),
max(
quantile(neo_data[[varenv]], 1 - qtl, na.rm = T),
quantile(as.data.frame(clim_sub)[[varenv]], 1 - qtl, na.rm = T)
)
)
) +
theme_void()
pbox_spe / pbox_env / phst + plot_layout(heights = c(0.1, 0.1, 0.8))
names(clim_sub)
names(neo_data)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/SDM01_global_copernicus.R")
species$species
species$species[species$superFamily == "Muricoidea"]
dev.off()
species$species[species$superFamily == "Muricoidea"]
species$species[species$superFamily == "Muricoidea"]
nc <- 10
seq_along(nc)
seq(1, nc)
sample(seq(1, nc), 3)
c("Président.e", "Secrétaire 1", "Secrétaire 2") %>%
paste0(":") %>%
paste(sample(seq(1, nc), 3))
library(dplyr)
c("Président.e", "Secrétaire 1", "Secrétaire 2") %>%
paste0(":") %>%
paste(sample(seq(1, nc), 3))
c("Président.e", "Secrétaire 1", "Secrétaire 2") %>%
paste(":") %>%
paste(sample(seq(1, nc), 3)) %>%
cat()
c("Président.e", "Secrétaire 1", "Secrétaire 2") %>%
paste(":") %>%
paste(sample(seq(1, nc), 3)) %>%
cat(sep = "\n")
nc <- 10
postes <- c("Président.e", "Secrétaire 1", "Secrétaire 2")
tirage <- sample(seq(1, nc), 3)
postes <- c("Président.e", "Secrétaire 1", "Secrétaire 2")
nc <- 10
tirage <- sample(seq(1, nc), 3)
tirage
tirage
length(postes)
tirage <- sample(seq(1, nc), 1)
tirage
print(paste(postes[i], ":", tirage))
i <- 1
print(paste(postes[i], ":", tirage))
print(cat(paste(postes[i], ":", tirage)))
cat(paste(postes[i], ":", tirage))
ok <- readline(prompt = "Presser 'Entrer' si la personne est consentante")
ok
ok <- readline(prompt = "Presser 'Entrer' si la personne est consentante :")
ok
ok <- readline(prompt = "Presser 'Entrer' si la personne est consentante :")
ok <- readline(prompt = "Poste validé ? (o/n) :")
ok <- readline(prompt = "Poste validé ?\no = ok\np = pas ok :")
ok <- readline(prompt = "Poste validé ? :\no = ok\np = pas ok")
ok <- readline(prompt = "Poste validé ? : \no = ok\np = pas ok")
ok
ok <- ""
while (!(ok %in% c("o", "p"))) {
ok <- readline(prompt = "Poste validé ? : \no = ok\np = pas ok")
}
print("Renseigner \no = ok\np = pas ok")
cat("Renseigner \no = ok\np = pas ok")
ok <- ""
while (!(ok %in% c("o", "p"))) {
cat("Renseigner : \no = ok\np = pas ok")
ok <- readline(prompt = "Poste validé ? : ")
}
ok
for (i in 1:length(bureau)) {
assemblee <- seq(1, nc)
tirage <- sample(assemblee, 1)
cat(paste(bureau[i], ":", tirage))
ok <- ""
while(ok != "o") {
while (!(ok %in% c("o", "p"))) {
cat("Renseigner : \no = ok\np = pas ok")
ok <- readline(prompt = "Poste validé ? : ")
}
tirage <- sample(seq(1, nc), 1)
cat(paste(bureau[i], ":", tirage))
}
}
assemblee <- seq(1, nc)
assemblee
tirage <- sample(assemblee, 1)
tirage
tirage
which(tirage %in% assemblee)
which(assemblee %in% tirage)
assemblee[-which(assemblee %in% tirage)]
bureau <- c("Président.e", "Secrétaire 1", "Secrétaire 2")
nc <- 10
for (i in 1:length(bureau)) {
assemblee <- seq(1, nc)
tirage <- sample(assemblee, 1)
cat(paste(bureau[i], ":", tirage))
ok <- ""
while(ok != "o") {
while (!(ok %in% c("o", "p"))) {
cat("Renseigner : \no = ok\np = pas ok")
ok <- readline(prompt = "Poste validé ? : ")
}
tirage <- sample(assemblee[-which(assemblee %in% tirage)], 1)
cat(paste(bureau[i], ":", tirage))
}
}
bureau <- c("Président.e", "Secrétaire 1", "Secrétaire 2")
nc <- 10
for (i in 1:length(bureau)) {
assemblee <- seq(1, nc)
tirage <- sample(assemblee, 1)
cat(paste(bureau[i], ":", tirage))
ok <- ""
while(ok != "o") {
while (!(ok %in% c("o", "p"))) {
cat("Renseigner : \no = oui\nn = non")
ok <- readline(prompt = "Poste validé ? : ")
}
tirage <- sample(assemblee[-which(assemblee %in% tirage)], 1)
cat(paste(bureau[i], ":", tirage))
}
}
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
nc <- 10
assemblee <- seq(1, nc)
tirage <- sample(assemblee, 0)
tirage
tirage <- sample(assemblee[-which(assemblee %in% tirage)], 1)
assemblee[-which(assemblee %in% tirage)]
tirage <- 0
tirage <- sample(assemblee[-which(assemblee %in% tirage)], 1)
assemblee[-which(assemblee %in% tirage)]
tirage <- NULL
assemblee[-which(assemblee %in% tirage)]
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
bureau <- c("Président.e", "Secrétaire 1", "Secrétaire 2")
nc <- 10
for (i in 1:length(bureau)) {
assemblee <- seq(1, nc)
ok <- ""
while(ok != "o") {
tirage <- sample(assemblee, 1)
cat(paste0(paste(bureau[i], ":", tirage), "\n"))
cat("Renseigner : \no = oui\nn = non")
ok <- readline(prompt = "Poste validé ? : ")
assemblee <- assemblee[-which(assemblee %in% tirage)]
}
}
print(length(assemblee))
source("~/.active-rstudio-document")
for (i in 1:length(bureau)) {
assemblee <- seq(1, nc)
ok <- ""
while(ok != "o") {
tirage <- sample(assemblee, 1)
cat(paste0(paste(bureau[i], ":", tirage), "\n"))
cat("Renseigner : \no = oui\nn = non")
ok <- readline(prompt = "Poste validé ? : ")
assemblee <- if (length(assemblee) != 0) {
assemblee[-which(assemblee %in% tirage)]
} else {
seq(1, nc)
}
}
}
n
n
n
source("~/.active-rstudio-document")
seq(1, nc)
for (i in 1:length(bureau)) {
assemblee <- seq(1, nc)
ok <- ""
while(ok != "o") {
tirage <- sample(assemblee, 1)
cat(paste0(paste(bureau[i], ":", tirage), "\n"))
cat("Renseigner : \no = oui\nn = non")
ok <- readline(prompt = "Poste validé ? : ")
assemblee <- if (length(assemblee) != 0) {
assemblee[-which(assemblee %in% tirage)]
} else {
seq(1, nc)
}
print(assemblee)
}
}
length(integer(0))
for (i in 1:length(bureau)) {
assemblee <- seq(1, nc)
ok <- ""
while(ok != "o") {
tirage <- sample(assemblee, 1)
cat(paste0(paste(bureau[i], ":", tirage), "\n"))
cat("Renseigner : \no = oui\nn = non")
ok <- readline(prompt = "Poste validé ? : ")
assemblee <- if (length(assemblee) != 0) {
assemblee[-which(assemblee %in% tirage)]
} else {
seq(1, nc)
}
print(assemblee)
}
}
length(integer(0))
for (i in 1:length(bureau)) {
assemblee <- seq(1, nc)
ok <- ""
while(ok != "o") {
tirage <- sample(assemblee, 1)
cat(paste0(paste(bureau[i], ":", tirage), "\n"))
cat("Renseigner : \no = oui\nn = non")
ok <- readline(prompt = "Poste validé ? : ")
assemblee <- if (length(assemblee) != 1) {
assemblee[-which(assemblee %in% tirage)]
} else {
seq(1, nc)
}
print(assemblee)
}
}
sample(1, 1)
for (i in 1:length(bureau)) {
assemblee <- seq(1, nc)
ok <- ""
while(ok != "o") {
tirage <- sample(assemblee, 1)
cat(paste0(paste(bureau[i], ":", tirage), "\n"))
cat("Renseigner : \no = oui\nn = non")
ok <- readline(prompt = "Poste validé ? : ")
assemblee <- if (length(assemblee) != 0) {
assemblee[-which(assemblee %in% tirage)]
} else {
seq(1, nc)
}
print(assemblee)
}
}
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
assemblee
sample(assemblee, 1)
sample(assemblee, 1)
sample(assemblee, 1)
sample(assemblee, 1)
sample(as.vector(9), 1)
sample(as.vector(9), 1)
sample(as.vector(9), 1)
sample(as.vector(9), 1)
sample(as.vector(9), 1)
sample(assemblee, 1, replace = T)
sample(assemblee, 1, replace = T)
sample(assemblee, 1, replace = T)
sample(assemblee, 1, replace = T)
sample(as.vector(9), 1)
sample(as.vector(9), 1, replace = T)
sample(as.vector(9), 1, replace = T)
sample(as.vector(9), 1, replace = T)
sample(as.vector(9), 1, replace = T)
sample(as.vector(9), 1, replace = T)
sample(9, 1, replace = T)
assemblee <- as.character(assemblee)
assemblee
source("~/.active-rstudio-document")
tirage
elu.e.s <- c()
elu.e.s
elu.e.s <- c(elu.e.s, tirage)
elu.e.s
assemblee %in% elu.e.s
elu.e.s %in% assemblee
source("~/.active-rstudio-document")
elu.e.s <- c()
i <- 1
ok <- ""
tour <- 1
cat(paste0(paste("Tour n°", tour), "\n"))
assemblee <- seq(1, nc)
assemblee <- as.character(assemblee)
elu.e.s
elu.e.s %in% assemblee
is.null(elu.e.s)
source("~/.active-rstudio-document")
!is.null(elu.e.s)
assemblee <- as.character(assemblee)
assemblee
cat(paste0(paste("Tour n°", tour), "\n"))
assemblee <- seq(1, nc)
assemblee
assemblee <- as.character(assemblee)
assemblee <- if (!is.null(elu.e.s)) {
if (elu.e.s %in% assemblee) {
assemblee[-which(assemblee %in% elu.e.s)]
}
}
assemblee
q
assemblee <- seq(1, nc)
assemblee <- as.character(assemblee)
assemblee
assemblee <- if (!is.null(elu.e.s)) {
if (elu.e.s %in% assemblee) {
assemblee[-which(assemblee %in% elu.e.s)]
}
} else {
assemblee
}
assemblee
print(assemblee)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
n
n
n
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
elu.e.s
assemblee
assemblee <- seq(1, nc)
assemblee <- as.character(assemblee)
assemblee
!is.null(elu.e.s)
assemblee <- if (!is.null(elu.e.s)) {
assemblee <- if (elu.e.s %in% assemblee) {
assemblee[-which(assemblee %in% elu.e.s)]
}
} else {
assemblee
}
assemblee
tirage <- sample(assemblee, 1)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
