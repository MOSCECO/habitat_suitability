)
tb <- pa[[alg]][[nisl]]
tb0 <- tb %>%
pivot_longer(cols = c("ensemble", "maxent", "rf")) %>%
st_drop_geometry(.) %>%
filter(value == 0) %>%
group_by(., name) %>%
summarise(., count = n()) %>%
cbind(model_val = "absence")
tb1 <- tb %>%
pivot_longer(cols = c("ensemble", "maxent", "rf")) %>%
st_drop_geometry(.) %>%
filter(value == 1) %>%
group_by(., name) %>%
summarise(., count = n()) %>%
cbind(model_val = "presence")
tb2 <- tb1 %>% rbind(tb0)
tb2$model_val <- factor(tb2$model_val, ordered = T)
ggplot(
tb2,
aes(x = name, y = count, group = name, fill = model_val)
) +
geom_col(col = "black", width = 0.8, position = "dodge2") +
geom_text(
aes(label = count),
position = position_dodge2(width = 0.8),
vjust = -0.7
) +
scale_fill_manual(values = c("white", "green")) +
guides(
fill = guide_legend(title = NULL),
col = guide_legend(title = "Algorithme\nde modélisation")
) +
labs(
title = paste0(binomial_name, " (", isl_lab, ")"),
subtitle = paste("Algorithme de compilation :", alg_lab)
) +
xlab("Algorithme de modélisation") +
ylab("Densité * Nombre de points")
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
names(mods)
nisl <- "GLP"
# chargement des éléments du graphe
isl          <- maps[[nisl]]
e            <- ext(climatologies[[nisl]])
sr_crop      <- terra::crop(sr, e)
tb           <- as.data.frame(sr_crop, xy = T)
names(tb)[3] <- "value"
occ <- spp_sf %>% st_crop(as.vector(e)[c(1,3,2,4)])
# emprise rectangulaire
o <- st_convex_hull(st_union(isl))
oproj <- st_transform(o, crs = "EPSG:32620")
cproj <- st_centroid(oproj)
bproj <- bSquare(cproj, as.numeric(sqrt(st_area(o))*1.5)^2)
b <- st_transform(bproj, crs = "EPSG:4326")
# ggplot() + geom_sf(data = b) + geom_sf(data = isl)
# (bbox <- st_bbox(b))
bbox <- st_bbox(b)
ggplot() +
geom_tile(data = tb, aes(x = x, y = y, fill = value)) +
geom_sf(data = isl)
sr <- mods$wmean$ensemble
# chargement des éléments du graphe
isl          <- maps[[nisl]]
e            <- ext(climatologies[[nisl]])
sr_crop      <- terra::crop(sr, e)
tb           <- as.data.frame(sr_crop, xy = T)
names(tb)[3] <- "value"
occ <- spp_sf %>% st_crop(as.vector(e)[c(1,3,2,4)])
# emprise rectangulaire
o <- st_convex_hull(st_union(isl))
oproj <- st_transform(o, crs = "EPSG:32620")
cproj <- st_centroid(oproj)
bproj <- bSquare(cproj, as.numeric(sqrt(st_area(o))*1.5)^2)
b <- st_transform(bproj, crs = "EPSG:4326")
# ggplot() + geom_sf(data = b) + geom_sf(data = isl)
# (bbox <- st_bbox(b))
bbox <- st_bbox(b)
ggplot() +
geom_tile(data = tb, aes(x = x, y = y, fill = value)) +
geom_sf(data = isl)
ggplot() +
geom_tile(data = tb, aes(x = x, y = y, fill = factor(value))) +
geom_sf(data = isl) +
scale_fill_manual(
values = c("white", "#03a700"),
limits = c(0, 1000)
)
ggplot() +
geom_tile(data = tb, aes(x = x, y = y, fill = factor(value))) +
geom_sf(data = isl) +
scale_fill_manual(values = c("white", "#03a700"))
# figures ggplot2
p <- ggplot() +
geom_tile(data = tb, aes(x = x, y = y, fill = factor(value))) +
geom_sf(data = isl) +
scale_fill_manual(values = c("white", "#03a700")) +
labs(x = "Longitude", y = "Latitude") +
xlim(bbox[c(1,3)]) +
ylim(bbox[c(2,4)]) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(plot.margin = unit(rep(0.01, 4), "pt"))
p
# figures ggplot2
p <- ggplot() +
geom_tile(data = tb, aes(x = x, y = y, fill = factor(value))) +
geom_sf(data = isl) +
scale_fill_manual(
values = c("white", "#03a700"),
labels = c("Environnement non-adéquat", "Environnement adéquat")
) +
labs(x = "Longitude", y = "Latitude") +
guides(fill = guide_legend(title = NULL)) +
xlim(bbox[c(1,3)]) +
ylim(bbox[c(2,4)]) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(plot.margin = unit(rep(0.01, 4), "pt"))
p
# figures ggplot2
p <- ggplot() +
geom_tile(data = tb, aes(x = x, y = y, fill = factor(value))) +
geom_sf(data = isl) +
scale_fill_manual(
values = c("white", "#03a700"),
labels = c("Non-adéquat", "Adéquat")
) +
labs(x = "Longitude", y = "Latitude") +
guides(fill = guide_legend(title = "Environnement")) +
xlim(bbox[c(1,3)]) +
ylim(bbox[c(2,4)]) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(plot.margin = unit(rep(0.01, 4), "pt"))
p
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/sdm_1algo_Claremontiella_nodulosa_4A_05_verification_pa.R", echo=TRUE)
densities_pa
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/sdm_1algo_Claremontiella_nodulosa_4A_05_verification_pa.R", echo=TRUE)
# présences/absences à l'habitat
proportions_pa <- sapply(
names(pa),
\(alg) {
# alg <- names(pa)[[1]]
alg_lab <- switch(
alg, wmean = "Moyenne pondérée", ca = "Moyenne d'ensemble"
)
sapply(
names(pa[[alg]]),
\(nisl) {
# nisl <- names(pa[[alg]])[[1]]
isl_lab <- switch(
nisl,
ANT = "Guadeloupe et Martinique",
GLP = "Guadeloupe",
MTQ = "Martinique"
)
tb <- pa[[alg]][[nisl]]
mapply(
\(alg_mod) {
# alg_mod <- "ensemble"
# alg_col <- "red"
tb0 <- tb %>%
pivot_longer(cols = c("ensemble", "maxent", "rf")) %>%
st_drop_geometry(.) %>%
filter(value == 0) %>%
group_by(., name) %>%
summarise(., count = n()) %>%
cbind(model_val = "absence")
tb1 <- tb %>%
pivot_longer(cols = c("ensemble", "maxent", "rf")) %>%
st_drop_geometry(.) %>%
filter(value == 1) %>%
group_by(., name) %>%
summarise(., count = n()) %>%
cbind(model_val = "presence")
tb2 <- tb1 %>% rbind(tb0)
tb2$model_val <- factor(tb2$model_val, ordered = T)
tb3 <- tb2 %>% filter(model_val == alg_mod)
ggplot(
tb3,
aes(x = name, y = count, group = name, fill = model_val)
) +
geom_col(col = "black", width = 0.8, position = "dodge2") +
geom_text(
aes(label = count),
position = position_dodge2(width = 0.8),
vjust = -0.7
) +
scale_fill_manual(values = c("white", "green")) +
guides(
fill = guide_legend(title = NULL),
col = guide_legend(title = "Algorithme\nde modélisation")
) +
labs(
title = paste0(binomial_name, " (", isl_lab, ")"),
subtitle = paste("Algorithme de compilation :", alg_lab)
) +
xlab("Algorithme de modélisation") +
ylab("Nombre d'absences correctement prédites")
},
c("ensemble", "maxent", "rf"),
SIMPLIFY = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
proportions_pa
alg <- names(pa)[[1]]
alg_lab <- switch(
alg, wmean = "Moyenne pondérée", ca = "Moyenne d'ensemble"
)
nisl <- names(pa[[alg]])[[1]]
isl_lab <- switch(
nisl,
ANT = "Guadeloupe et Martinique",
GLP = "Guadeloupe",
MTQ = "Martinique"
)
tb <- pa[[alg]][[nisl]]
alg_mod <- "ensemble"
tb0 <- tb %>%
pivot_longer(cols = c("ensemble", "maxent", "rf")) %>%
st_drop_geometry(.) %>%
filter(value == 0) %>%
group_by(., name) %>%
summarise(., count = n()) %>%
cbind(model_val = "absence")
tb1 <- tb %>%
pivot_longer(cols = c("ensemble", "maxent", "rf")) %>%
st_drop_geometry(.) %>%
filter(value == 1) %>%
group_by(., name) %>%
summarise(., count = n()) %>%
cbind(model_val = "presence")
tb2 <- tb1 %>% rbind(tb0)
tb2$model_val <- factor(tb2$model_val, ordered = T)
tb3 <- tb2 %>% filter(model_val == alg_mod)
tb3
tb2$model_val
tb2
alg_mod
# présences/absences à l'habitat
proportions_pa <- sapply(
names(pa),
\(alg) {
# alg <- names(pa)[[1]]
alg_lab <- switch(
alg, wmean = "Moyenne pondérée", ca = "Moyenne d'ensemble"
)
sapply(
names(pa[[alg]]),
\(nisl) {
# nisl <- names(pa[[alg]])[[1]]
isl_lab <- switch(
nisl,
ANT = "Guadeloupe et Martinique",
GLP = "Guadeloupe",
MTQ = "Martinique"
)
tb <- pa[[alg]][[nisl]]
mapply(
\(alg_mod) {
# alg_mod <- "ensemble"
tb0 <- tb %>%
pivot_longer(cols = c("ensemble", "maxent", "rf")) %>%
st_drop_geometry(.) %>%
filter(value == 0) %>%
group_by(., name) %>%
summarise(., count = n()) %>%
cbind(model_val = "absence")
tb1 <- tb %>%
pivot_longer(cols = c("ensemble", "maxent", "rf")) %>%
st_drop_geometry(.) %>%
filter(value == 1) %>%
group_by(., name) %>%
summarise(., count = n()) %>%
cbind(model_val = "presence")
tb2 <- tb1 %>% rbind(tb0)
tb2$model_val <- factor(tb2$model_val, ordered = T)
tb3 <- tb2 %>% filter(name == alg_mod)
ggplot(
tb3,
aes(x = name, y = count, group = name, fill = model_val)
) +
geom_col(col = "black", width = 0.8, position = "dodge2") +
geom_text(
aes(label = count),
position = position_dodge2(width = 0.8),
vjust = -0.7
) +
scale_fill_manual(values = c("white", "green")) +
guides(
fill = guide_legend(title = NULL),
col = guide_legend(title = "Algorithme\nde modélisation")
) +
labs(
title = paste0(binomial_name, " (", isl_lab, ")"),
subtitle = paste("Algorithme de compilation :", alg_lab)
) +
xlab("Algorithme de modélisation") +
ylab("Nombre d'absences correctement prédites")
},
c("ensemble", "maxent", "rf"),
SIMPLIFY = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
proportions_pa
# présences/absences à l'habitat
proportions_pa <- sapply(
names(pa),
\(alg) {
# alg <- names(pa)[[1]]
alg_lab <- switch(
alg, wmean = "Moyenne pondérée", ca = "Moyenne d'ensemble"
)
sapply(
names(pa[[alg]]),
\(nisl) {
# nisl <- names(pa[[alg]])[[1]]
isl_lab <- switch(
nisl,
ANT = "Guadeloupe et Martinique",
GLP = "Guadeloupe",
MTQ = "Martinique"
)
tb <- pa[[alg]][[nisl]]
mapply(
\(alg_mod) {
# alg_mod <- "ensemble"
tb0 <- tb %>%
pivot_longer(cols = c("ensemble", "maxent", "rf")) %>%
st_drop_geometry(.) %>%
filter(value == 0) %>%
group_by(., name) %>%
summarise(., count = n()) %>%
cbind(model_val = "absence")
tb1 <- tb %>%
pivot_longer(cols = c("ensemble", "maxent", "rf")) %>%
st_drop_geometry(.) %>%
filter(value == 1) %>%
group_by(., name) %>%
summarise(., count = n()) %>%
cbind(model_val = "presence")
tb2 <- tb1 %>% rbind(tb0)
tb2$model_val <- factor(tb2$model_val, ordered = T)
tb3 <- tb2 %>% filter(name == alg_mod)
ggplot(
tb3,
aes(x = name, y = count, group = name, fill = model_val)
) +
geom_col(col = "black", width = 0.8, position = "dodge2") +
geom_text(
aes(label = count),
position = position_dodge2(width = 0.8),
vjust = -0.7
) +
scale_fill_manual(
values = c("white", "green"),
labels = c("Adéquat", "Non-adéquat")
) +
guides(
fill = guide_legend(title = "Environnement"),
col = guide_legend(title = "Algorithme\nde modélisation")
) +
labs(
title = paste0(binomial_name, " (", isl_lab, ")"),
subtitle = paste("Algorithme de compilation :", alg_lab)
) +
xlab("Algorithme de modélisation") +
ylab("Nombre d'absences correctement prédites")
},
c("ensemble", "maxent", "rf"),
SIMPLIFY = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
proportions_pa
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/sdm_1algo_Claremontiella_nodulosa_4A_05_verification_pa.R", echo=TRUE)
# préparation des cartes ----
# pour chaque combinaison algorithme compilation / île
p_alg_pa <- sapply(
names(mods),
\(alg_compilation) {
alg_comp <- switch(
alg_compilation, wmean = "Moyenne pondérée", ca = "Moyenne d'ensemble"
)
sapply(
names(mods[[alg_compilation]]),
\(alg_modelisation) {
alg_modl <- switch(
alg_modelisation,
ensemble = "Ensemble",
maxent   = "Maximum d'entropie (MAXENT)",
rf       = "Forêt aléatoire (Random Forest)"
)
sr <- mods[[alg_compilation]][[alg_modelisation]]
p_pa <- plotComparaisonOccurrences_pa(sr, alg_comp, alg_modl)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/FUN/FUN_plotComparaisonOccurrences_pa.R", echo=TRUE)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/sdm_1algo_Claremontiella_nodulosa_4A_05_verification_pa.R", echo=TRUE)
ggplot(
tb3,
aes(y = name, x = count, group = name, fill = model_val)
) +
geom_col(col = "black", width = 0.8, position = "dodge2") +
geom_text(
aes(label = count),
position = position_dodge2(width = 0.8),
vjust = -0.7
) +
scale_fill_manual(
values = c("white", "green"),
labels = c("Non-adéquat", "Adéquat")
) +
guides(
fill = guide_legend(title = "Environnement"),
col = guide_legend(title = "Algorithme\nde modélisation")
) +
labs(
title = paste0(binomial_name, " (", isl_lab, ")"),
subtitle = paste("Algorithme de compilation :", alg_lab)
) +
xlab("Algorithme de modélisation") +
ylab("Nombre d'absences correctement prédites")
ggplot(
tb3,
aes(y = name, x = count, group = name, fill = model_val)
) +
geom_col(col = "black", width = 0.8, position = "dodge2") +
geom_text(
aes(label = count),
position = position_dodge2(width = 0.8),
vjust = -0.7
) +
scale_fill_manual(
values = c("white", "green"),
labels = c("Non-adéquat", "Adéquat")
) +
guides(
fill = guide_legend(title = "Environnement"),
col = guide_legend(title = "Algorithme\nde modélisation")
) +
labs(
title = paste0(binomial_name, " (", isl_lab, ")"),
subtitle = paste("Algorithme de compilation :", alg_lab)
) +
xlab("Algorithme de modélisation") +
ylab("Nombre d'absences correctement prédites")
dev.off()
dev.off()
dev.off()
dev.off()
ggplot(
tb3,
aes(y = name, x = count, group = name, fill = model_val)
) +
geom_col(col = "black", width = 0.8, position = "dodge2") +
geom_text(
aes(label = count),
position = position_dodge2(width = 0.8),
vjust = -0.7
) +
scale_fill_manual(
values = c("white", "green"),
labels = c("Non-adéquat", "Adéquat")
) +
guides(
fill = guide_legend(title = "Environnement"),
col = guide_legend(title = "Algorithme\nde modélisation")
) +
labs(
title = paste0(binomial_name, " (", isl_lab, ")"),
subtitle = paste("Algorithme de compilation :", alg_lab)
) +
xlab("Algorithme de modélisation") +
ylab("Nombre d'absences correctement prédites")
