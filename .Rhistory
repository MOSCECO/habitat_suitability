st_drop_geometry() %>%
filter(scale == "local") %>%
filter(type == "pr") %>%
select(-c(type, id, scale, x, y, individualCount))
}
)
)
bios <- bios[, names(mods_vals$wmean$ensemble)]
mods_vals$wmean <- append(mods_vals$wmean, list(observed = bios))
mods_vals$ca <- append(mods_vals$ca, list(observed = bios))
# comparaison des valeurs des différences niches modélisées et observées
# localement
alg_cmp <- "wmean"
m <- mods_vals[[alg_cmp]]
names(m)
# Centrage réduction
m <- lapply(
names(m),
\(alg_mod) {
md <- m[[alg_mod]] %>%
apply(2, \(x) {(x - mean(x, na.rm = T))/sd(x, na.rm = T)}) %>%
as.data.frame()
e <- cbind(alg_cmp, alg_mod, md)
return(e)
}
)
m
mm <- do.call(rbind, m) %>%
select(-1) %>%
melt(id.vars = "alg_mod")
mm$alg_mod <- factor(mm$alg_mod)
levels(mm$alg_mod) <- c("Ensemble", "MAXENT", "Observations", "Forêt Aléatoire")
# différences significatives ou non entre niches modélisées et observée ?
mm_split <- split(mm, f = mm$variable)
res_wxtest <- lapply(
mm_split,
\(tb) {
tb <- na.omit(tb)
pairwise.wilcox.test(
tb$value, tb$alg_mod, p.adjust.method = "bonferroni"
)
}
)
res_wxtest %>%
lapply(pluck, "p.value") %>%
lapply(`<`, 0.05/4)
# représentation graphique
ggplot(
data = mm,
aes(
x = variable,
y = value,
col = alg_mod,
group = interaction(alg_mod, variable)
)
) +
# geom_violin(position = "dodge") +
geom_boxplot(position = "dodge") +
# geom_jitter(
#   aes(group = interaction(alg_mod, variable)),
#   position = position_jitterdodge(dodge.width = 0.9),
#   size = 0.1,
#   alpha = 0.5
# ) +
guides(
col  = guide_legend(title = "Algorithme de\nmodélisation")
) +
xlab("Variable environnementale (climatologies)") +
ylab("Valeurs centrées réduites")
mods_vals <- sapply(
names(mods),
\(alg_mod) {
sapply(
names(mods[[alg_mod]]),
\(alg_cmp) {
x <- mods_masks[[alg_mod]][[alg_cmp]]
as.data.frame(x)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
bios <- do.call(
cbind,
lapply(
list.files(here("data", "analysis"), pattern = "bio_data", full.names = T),
\(p) {
d <- readRDS(p)
d %>%
st_drop_geometry() %>%
filter(scale == "local") %>%
filter(type == "pr") %>%
select(-c(type, id, scale, x, y, individualCount))
}
)
)
bios <- bios[, names(mods_vals$wmean$ensemble)]
mods_vals$wmean <- append(list(observed = bios), mods_vals$wmean)
mods_vals$ca <- append(list(observed = bios), mods_vals$ca)
# comparaison des valeurs des différences niches modélisées et observées
# localement
alg_cmp <- "wmean"
m <- mods_vals[[alg_cmp]]
# Centrage réduction
m <- lapply(
names(m),
\(alg_mod) {
md <- m[[alg_mod]] %>%
apply(2, \(x) {(x - mean(x, na.rm = T))/sd(x, na.rm = T)}) %>%
as.data.frame()
e <- cbind(alg_cmp, alg_mod, md)
return(e)
}
)
mm <- do.call(rbind, m) %>%
select(-1) %>%
melt(id.vars = "alg_mod")
mm$alg_mod <- factor(mm$alg_mod)
levels(mm$alg_mod)
mm$alg_mod
mm <- do.call(rbind, m) %>%
select(-1) %>%
melt(id.vars = "alg_mod")
mm$alg_mod
unique(mm$alg_mod)
mm$alg_mod <- factor(mm$alg_mod, ordered = T)
levels(mm$alg_mod)
mm <- do.call(rbind, m) %>%
select(-1) %>%
melt(id.vars = "alg_mod")
unique(mm$alg_mod)
mm$alg_mod <- factor(mm$alg_mod, levels = unique(mm$alg_mod))
levels(mm$alg_mod)
unique(mm$alg_mod)
View(mm)
View(mm)
table(mm$alg_mod)
length(unique(mm$variable))
111*14
levels(mm$alg_mod)
mm <- do.call(rbind, m) %>%
select(-1) %>%
melt(id.vars = "alg_mod")
unique(mm$alg_mod)
mm <- do.call(rbind, m) %>%
select(-1) %>%
melt(id.vars = "alg_mod")
mm$alg_mod <- factor(
mm$alg_mod, levels = c("observed", "rf", "maxent", "ensemble")
)
levels(mm$alg_mod)
levels(mm$alg_mod) <- c("Observations", "Forêt Aléatoire", "MAXENT", "Ensemble")
# différences significatives ou non entre niches modélisées et observée ?
mm_split <- split(mm, f = mm$variable)
res_wxtest <- lapply(
mm_split,
\(tb) {
tb <- na.omit(tb)
pairwise.wilcox.test(
tb$value, tb$alg_mod, p.adjust.method = "bonferroni"
)
}
)
res_wxtest %>%
lapply(pluck, "p.value") %>%
lapply(`<`, 0.05/4)
res_wxtest$mean.sbt
res_wxtest
?pairwise.wilcox.test
res_wxtest %>%
lapply(pluck, "p.value") %>%
lapply(`<`, 0.05)
# représentation graphique
ggplot(
data = mm,
aes(
x = variable,
y = value,
col = alg_mod,
group = interaction(alg_mod, variable)
)
) +
# geom_violin(position = "dodge") +
geom_boxplot(position = "dodge") +
# geom_jitter(
#   aes(group = interaction(alg_mod, variable)),
#   position = position_jitterdodge(dodge.width = 0.9),
#   size = 0.1,
#   alpha = 0.5
# ) +
guides(
col  = guide_legend(title = "Algorithme de\nmodélisation")
) +
xlab("Variable environnementale (climatologies)") +
ylab("Valeurs centrées réduites")
# comparaison des valeurs des différences niches modélisées et observées
# localement
comp_niches <- lapply(
names(mods_vals),
\(alg_cmp) {
# alg_cmp <- "wmean"
m <- mods_vals[[alg_cmp]]
# Centrage réduction
m <- lapply(
names(m),
\(alg_mod) {
md <- m[[alg_mod]] %>%
apply(2, \(x) {(x - mean(x, na.rm = T))/sd(x, na.rm = T)}) %>%
as.data.frame()
e <- cbind(alg_cmp, alg_mod, md)
return(e)
}
)
# pivot
mm <- do.call(rbind, m) %>%
select(-1) %>%
melt(id.vars = "alg_mod")
mm$alg_mod <- factor(
mm$alg_mod, levels = c("observed", "rf", "maxent", "ensemble")
)
levels(mm$alg_mod) <- c("Observations", "Forêt Aléatoire", "MAXENT", "Ensemble")
# différences significatives ou non entre niches modélisées et observée ?
mm_split <- split(mm, f = mm$variable)
res_wxtest <- lapply(
mm_split,
\(tb) {
tb <- na.omit(tb)
pairwise.wilcox.test(
tb$value, tb$alg_mod, p.adjust.method = "bonferroni"
)
}
)
seuils_test <- res_wxtest %>%
lapply(pluck, "p.value") %>%
lapply(`<`, 0.05) # Seuil normal parce que la correction de
# Bonferroni incluse dans "p.adjust" multiplie les p.values
# et ne divise pas le seuil de risque
# représentation graphique
p <- ggplot(
data = mm,
aes(
x = variable,
y = value,
col = alg_mod,
group = interaction(alg_mod, variable)
)
) +
# geom_violin(position = "dodge") +
geom_boxplot(position = "dodge") +
# geom_jitter(
#   aes(group = interaction(alg_mod, variable)),
#   position = position_jitterdodge(dodge.width = 0.9),
#   size = 0.1,
#   alpha = 0.5
# ) +
guides(
col  = guide_legend(title = "Algorithme de\nmodélisation")
) +
xlab("Variable environnementale (climatologies)") +
ylab("Valeurs centrées réduites")
return(list(res = seuils_test, p = p))
}
)
comp_niches[[1]]$res
# ca
comp_niches[[2]]$res
comp_niches[[2]]$p
ameri_depth <- read_stars(
here("data", "raw", "gebco_2023_n63.1055_s-60.293_w-143.4375_e-27.4219.tif")
)
ameri_depth <- read_stars(
here("data", "raw", "dpth", "gebco_2023_n63.1055_s-60.293_w-143.4375_e-27.4219.tif")
)
ameri_depth
biios
class(bios)
ameri_occur <- lapply(
list.files(here("data", "analysis"), pattern = "bio_data", full.names = T),
readRDS
)
ameri_occur
View(ameri_occur[[1]])
lapply(ameri_occur, dim)
lapply(ameri_occur, names)
table(ameri_occur[[1]]$type)
table(ameri_occur[[1]]$scale)
ameri_occur <- list.files(
here("data", "analysis"), pattern = "bio_data_cgc", full.names = T
)
ameri_occur
list.files(
here("data", "analysis"), pattern = "bio_data", full.names = T
)
ameri_occur <- list.files(
here("data", "analysis"), pattern = "bio_data_cpc", full.names = T
) %>% readRDS()
ameri_occur <- ameri_occur %>%
filter(scale == "global" & type == "pr")
dim(ameri_occur)
View(ameri_occur)
res <- st_extract(ameri_depth, ameri_depth)
res <- st_extract(ameri_depth, ameri_occur)
res
View(res)
class(res$`gebco_2023_n63.1055_s-60.293_w-143.4375_e-27.4219.tif`)
names(res) <- "depth"
res <- st_extract(ameri_depth, ameri_occur, )
names(res) <- c("depth", "geometry")
res$depth <- as.numeric(res$depth)
head(res)
summary(res$depth)
table(res$depth > 0)
res$depth > 0 <- 0
res$depth[res$depth > 0] <- 0
summary(res$depth)
# Local
local_occur <- list.files(
here("data", "analysis"), pattern = "bio_data_hab", full.names = T
) %>% readRDS()
summary(local_occur$depth)
quantile(local_occur$depth, 0.9)
quantile(local_occur$depth, 0.99)
quantile(local_occur$depth, 0.01)
quantile(local_occur$depth, 0.95)
quantile(local_occur$depth, 0.05)
quantile(local_occur$depth, 0.9)
quantile(local_occur$depth, 0.1)
quantile(res$depth, 0.9)
quantile(res$depth, 0.1)
quantile(res$depth, 0.05)
summary(local_occur_depth)
summary(local_occur$depth)
summary(res$depth)
all_depths <- res$depth %>% c(local_occur$depth)
summary(all_depths)
summary(all_depths)[c(2, 5)]
bnd <- summary(all_depths)[c(2, 5)]
bnd <- summary(all_depths)[c(2, 5)]
bnd
x11(); plot(hab_sub$depth)
p_depth_boundaries <- here("data", "analysis", "depth_boundaries")
makeMyDir(p_depth_boundaries)
# species
binomial_name <- "Claremontiella nodulosa"
gsub(" ", "_", binomial_name)
paste(gsub(" ", "_", binomial_name), "depth", "boundaries", sep = "_") %>%
paste0(".rds")
p_depth_boundaries <- here("data", "analysis", "depth_boundaries")
makeMyDir(p_depth_boundaries)
file_name <- paste(gsub(" ", "_", binomial_name), "depth", "boundaries", sep = "_") %>%
paste0(".rds")
saveRDS(bnd, here(p_depth_boundaries, file_name))
list.files(
here("data", "analysis", "depth_boundaries")
)
# Espèce considérée ----
binomial_name <- "Claremontiella nodulosa"
bn <- gsub(" ", "_", binomial_name)
bn
bnd <- list.files(
here("data", "analysis", "depth_boundaries"), pattern = bn, full.names = T
) %>% readRDS()
bnd
-10 %in% bnd
d <- -10
d >= bnd[[1]] & d <= bnd[[2]]
# Filtre de profondeur par connaissance expert...
# ... dont le proxy sont les 1er et 3ème quartiles des
# distribution de profondeurs des espèces.
d   <- hab_sub$depth
as.data.frame(d)
dmask <- ifel(d >= bnd[[1]] & d <= bnd[[2]], 1, 0)
x11(), plot(dmask)
x11(); plot(dmask)
bnd[[1]]
bnd[[2]]
floor(bnd[[1]]/10)*10
ceiling(bnd[[2]]/10)*10
# Filtre de profondeur par connaissance expert...
# ... dont le proxy sont les 1er et 3ème quartiles des
# distribution de profondeurs des espèces.
d   <- hab_sub$depth
bnd <- list.files(
here("data", "analysis", "depth_boundaries"), pattern = bn, full.names = T
) %>% readRDS()
# arrondissons aux dizaines inférieure et supérieure
bnd[[1]] <- floor(bnd[[1]]/10)*10
bnd[[2]] <- ceiling(bnd[[2]]/10)*10
dmask <- ifel(d >= bnd[[1]] & d <= bnd[[2]], 1, 0)
x11(); plot(dmask)
# Filtre de profondeur par connaissance expert...
# ... dont le proxy sont les 1er et 3ème quartiles des
# distribution de profondeurs des espèces.
d   <- hab_sub$depth
bnd <- list.files(
here("data", "analysis", "depth_boundaries"), pattern = bn, full.names = T
) %>% readRDS()
# arrondissons aux dizaines inférieure et supérieure
# bnd[[1]] <- floor(bnd[[1]]/10)*10
# bnd[[2]] <- ceiling(bnd[[2]]/10)*10
dmask <- ifel(d >= bnd[[1]] & d <= bnd[[2]], 1, 0)
# paramètrage ----
patterns <- c("Cla.nod.rf5.0", "Cla.nod.maxent5.0", "Cla.nod.basic.+ensemble")
x11(); plot(dmask)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/sdm_1algo_Claremontiella_nodulosa_4A_04_compilation.R", echo=TRUE)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/sdm_1algo_Claremontiella_nodulosa_4A_05_verification_pa.R", echo=TRUE)
path_figures_carte <- here("figures", "cartes_de_distribution")
makeMyDir(path_figures_carte)
# Occurrences spatialisées de chaque espèce
offsets_title_tax <- list(
GLP = c(x = - 1.01,  y = - 0.05),
MTQ = c(x = - 0.47, y = - 0.03)
)
dimensions_ggexport <- list(
GLP = c(width = 2300, height = 2000, res = 200),
MTQ = c(width = 1850, height = 2000, res = 200)
)
figures_cartes_distributions <- mapply(
function(isl, offs, dims) {
path_figures_carte_isl <- here(path_figures_carte, isl)
makeMyDir(path_figures_carte_isl)
depths <- bathy[[isl]]
depths_bbox <- c(
xmin = min(depths$x),
ymin = min(depths$y),
xmax = max(depths$x),
ymax = max(depths$y)
)
p_distribution_taxon <- mapply(
function(tax, title_tax, col_tax) {
path_figures_carte_isl_tax <- here(path_figures_carte_isl, title_tax)
makeMyDir(path_figures_carte_isl_tax)
tb <- species[[isl]][[tax]]
tc <- count(tb, scientificName)
tc <- tc[order(-tc$n), ]
tc_threshold <- tc[tc$n >= 10, ]
tb_threshold <- tb %>%
filter(scientificName %in% tc_threshold$scientificName)
tb_split <- split(tb_threshold, f = tb_threshold$scientificName)
p_distribution_species <- lapply(
tb_split,
function(spe) {
# spe <- tb_split$`Coralliophila salebrosa`
bn_spe <- unique(spe$scientificName)
p_out <- ggplot() +
geom_tile(
data = depths,
aes(x = x, y = y, fill = value)
) +
guides(fill = "none") +
new_scale("fill") +
geom_sf(data = maps[[isl]], col = NA, fill = "lightgreen") +
geom_point(
data = spe,
aes(x = decimalLongitude, y = decimalLatitude),
col = "#C01417",
shape = "+",
size = 8
) +
theme(
axis.title = element_blank()
) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
p <- p_out  +
annotate(
"text",
label = bn_spe,
size = 11,
col = "white",
x = depths_bbox[[3]] + offs[[1]],
y = depths_bbox[[4]] + offs[[2]]
)
ggexport(
p,
filename = here(
path_figures_carte_isl_tax,
paste(
"carte",
"distribution",
isl %>% tolower(),
tax %>% tolower(),
gsub(" ", "-", bn_spe),
sep = "_"
) %>% paste0(".png")
),
width    = dims[[1]],
height   = dims[[2]],
res      = dims[[3]]
)
return(p_out)
}
)
return(p_distribution_species)
},
taxa,
Taxa,
colors_taxa,
SIMPLIFY = F,
USE.NAMES = T
)
return(p_distribution_taxon)
},
islands,
offsets_title_tax,
dimensions_ggexport,
SIMPLIFY = F,
USE.NAMES = T
)
