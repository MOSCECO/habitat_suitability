b <- b[names(b)[which(grepl("tss", names(b)))]]
d <- dis$presence_absence[[supfam]][[bn]]$wmean$ssp585
d <- d[names(d)[which(grepl("tss", names(d)))]]
l <- list(a, b, d)
lc <- lapply(l, \(x) terra::crop(x, terra::ext(maps$MTQ)))
par(mfrow = c(1, 3)); plot(lc[[1]]); plot(lc[[2]]); plot(lc[[3]])
lc <- lapply(l, \(x) terra::crop(x, terra::ext(maps$GLP)))
par(mfrow = c(1, 3)); plot(lc[[1]]); plot(lc[[2]]); plot(lc[[3]])
a <- dis$presence_absence[[supfam]][[bn]]$ca$current
a <- a[names(a)[which(grepl("tss", names(a)))]]
b <- dis$presence_absence[[supfam]][[bn]]$ca$ssp126
b <- b[names(b)[which(grepl("tss", names(b)))]]
d <- dis$presence_absence[[supfam]][[bn]]$ca$ssp585
d <- d[names(d)[which(grepl("tss", names(d)))]]
l <- list(a, b, d)
lc <- lapply(l, \(x) terra::crop(x, terra::ext(maps$MTQ)))
par(mfrow = c(1, 3)); plot(lc[[1]]); plot(lc[[2]]); plot(lc[[3]])
lc <- lapply(l, \(x) terra::crop(x, terra::ext(maps$GLP)))
par(mfrow = c(1, 3)); plot(lc[[1]]); plot(lc[[2]]); plot(lc[[3]])
# Données
d <- read.csv("data/raw/body_fat.csv")
d
str(d)
View(d)
names(d)
hist(d)
d
str(d)
hist(d$X.Fat)
hist(d$X.Fat, xlim = c(0, 50))
hist(d$X.Fat, xlim = c(0, 50), breaks = 10)
hist(d$X.Fat, xlim = c(0, 50), breaks = 20)
hist(d$X.Fat, xlim = c(0, 50), breaks = 15)
hist(d$X.Fat, xlim = c(0, 50), breaks = 12)
hist(d$X.Fat, xlim = c(0, 50), breaks = 10)
hist(d$X.Fat, xlim = c(0, 50), breaks = 20)
?hist
hist(d$X.Fat, xlim = c(0, 50), breaks = "Scott")
hist(d$X.Fat, xlim = c(0, 50), breaks = "FD")
hist(d$X.Fat, xlim = c(0, 50), breaks = seq(1:20))
hist(d$X.Fat, xlim = c(0, 50), breaks = 20)
hist(d$X.Fat, breaks = 20)
d
?sample
n <- 500000
n_resamp <- 500000
b <- lapply(
seq(1, n_resamp),
sample,
x   = d$X.Fat,
size = length(d$X.Fat),
replace = TRUE
)
length(d$X.Fat)
d$X.Fat
sample(
x       = d$X.Fat,
size    = length(d$X.Fat),
replace = TRUE
)
sample(
x       = d$X.Fat,
size    = length(d$X.Fat),
replace = TRUE
)
b <- lapply(
X   = seq(1, n_resamp),
FUN = sample,
x       = d$X.Fat,
size    = length(d$X.Fat),
replace = TRUE
)
?lapply
n_resamp <- 500000
b <- lapply(
X   = seq(1, n_resamp),
FUN = \(x) {
sample(
x       = d$X.Fat,
size    = length(d$X.Fat),
replace = TRUE
)
}
)
b
tb <- Reduce(cbind, b)
n_resamp <- 5000
b <- lapply(
X   = seq(1, n_resamp),
FUN = \(x) {
sample(
x       = d$X.Fat,
size    = length(d$X.Fat),
replace = TRUE
)
}
)
tb <- Reduce(cbind, b)
dim(tb)
tb
head(tb)
dim(tb)
View(tb)
class(tb)
tb <- as.data.frame(tb)
head(tb)
library(tibble)
tb <- as_tibble(tb)
tb
m <- apply(tb, 2, mean)
m
hist(m)
hist(m, breaks = 100)
hist(m, breaks = 50)
n_resamp <- 50000
b <- lapply(
X   = seq(1, n_resamp),
FUN = \(x) {
sample(
x       = d$X.Fat,
size    = length(d$X.Fat),
replace = TRUE
)
}
)
tb <- Reduce(cbind, b)
source("~/.active-rstudio-document", echo=TRUE)
require(tibble)
# Données
d <- read.csv("data/raw/body_fat.csv")
hist(d$X.Fat, breaks = 20)
n_resamp <- 10000
b <- lapply(
X   = seq(1, n_resamp),
FUN = \(x) {
sample(
x       = d$X.Fat,
size    = length(d$X.Fat),
replace = TRUE
)
}
)
tb <- Reduce(cbind, b) %>%
as_tibble()
m <- apply(tb, 2, mean)
hist(m, breaks = 100)
m
summary(m)
quantile(m, probs = c(2.25, 97.25))
quantile(m, probs = c(0.25, 0.975))
quantile(m, probs = c(0.5, 0.95))
quantile(m, probs = c(0.25, 0.975))
require(tibble)
# Données
d <- read.csv("data/raw/body_fat.csv")
hist(d$X.Fat, breaks = 20)
n_resamp <- 100000
b <- lapply(
X   = seq(1, n_resamp),
FUN = \(x) {
sample(
x       = d$X.Fat,
size    = length(d$X.Fat),
replace = TRUE
)
}
)
tb <- Reduce(cbind, b) %>%
as_tibble()
source(here::here("scripts", "boot.R"))
# Test avec noms d'espèces
d <- species$species
d
# Test avec noms d'espèces
d <- species$species
n_resamp <- 10000
b <- lapply(
X   = seq(1, n_resamp),
FUN = \(x) {
sample(
x       = d$X.Fat,
size    = length(d$X.Fat),
replace = TRUE
)
}
)
b <- lapply(
X   = seq(1, n_resamp),
FUN = \(x) {
sample(
x       = d,
size    = length(d),
replace = TRUE
)
}
)
tb <- Reduce(cbind, b) %>%
as_tibble()
m
tb
m <- apply(tb, 2, \(x) length(unique(x)))
m
hist(m, breaks = 100)
hist(m)
quantile(m, probs = c(0.25, 0.975))
?combn
combn(1, 2)
combn(2, 1)
combn(3, 1)
combn(4, 1)
combn(4, 2)
combn(3, 2)
dnbinom
?dnbinom
source(here::here("scripts", "boot.R"))
# importation/visualisation des probabilités d'occurrences / présences-absences
source(here("scripts", "popa_import.R"))
# presence-absence | committee averaging
a <- popaPlot(
projRasters         = dis,
type                = "presence_absence",
superfamily         = "all",
ensemble_algorithm  = "wmean",
threshold_algorithm = "ROC",
projection_time     = "ssp585"
)
# presence-absence | committee averaging
a <- popaPlot(
projRasters         = dis,
type                = "presence_absence",
superfamily         = "all",
ensemble_algorithm  = "wmean",
threshold_algorithm = "ROC",
projection_time     = "current"
)
a$`Phyllonotus pomum`
# presence-absence | committee averaging
pa_wmean_roc_current <- popaPlot(
projRasters         = dis,
type                = "presence_absence",
superfamily         = "all",
ensemble_algorithm  = "wmean",
threshold_algorithm = "ROC",
projection_time     = "current"
)
ae_wmean_current <- popaPlot(
projRasters         = dis,
type                = "adequation_environnementale",
superfamily         = "all",
ensemble_algorithm  = "wmean",
projection_time     = "current"
)
ae_wmean_current
plot(ae_wmean_current)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/FUN/FUN_popaPlot.R", echo=TRUE)
ae_wmean_current <- popaPlot(
projRasters         = dis,
type                = "adequation_environnementale",
superfamily         = "all",
ensemble_algorithm  = "wmean",
projection_time     = "current"
)
ae_wmean_current$combine
ae_wmean_current$combine %>% plot()
plot(hab_sub$depth)
x11(); plot(hab_sub$depth)
x11(); plot(ifel(hab_sub$depth < -300, 0, hab_sub$depth))
x11(); plot(ifel(hab_sub$depth < -300, NA, hab_sub$depth))
x11(); plot(ifel(hab_sub$depth < -150, NA, hab_sub$depth))
x11(); plot(ifel(hab_sub$depth < -50, NA, hab_sub$depth))
x11(); plot(ae_wmean_current$combine)
x11(); plot(ifel(ae_wmean_current$combine > 400, 1, 0))
# functions
lapply(
list.files(
here("scripts", "FUN"),
full.names = T
),
source
)
# boot data_occ_preparation
# libraries ----
libs_to_call <- list(
"ade4",
"biomod2",
"data.table",
"devtools",
"dismo",
"doMPI",
"factoextra",
"FactoMineR",
"ggnewscale",
"ggplot2",
"ggpubr",
"ggthemes",
"here",
"patchwork",
"purrr",
"raster",
"reshape2",
"sf",
"sp",
"stars",
"stringr",
"terra",
"tidync",
"tidyverse",
"usdm",
"vegan"
)
# library calls
lapply(
libs_to_call,
function(i) {
bool <- is.element(i, .packages(all.available = TRUE))
if (!bool) {
install.packages(i, dependencies = T)
}
library(i, character.only = TRUE)
}
)
# remote libraries (github)
# Sys.getenv("GITHUB_PAT")
# Sys.unsetenv("GITHUB_PAT")
# Sys.getenv("GITHUB_PAT")
# remote libraries ----
# github_accounts <- as.list(
#   rep("SantanderMetGroup", 6)
# )
#
# remote_libs_to_call <- list(
#   "loadeR.java",
#   "climate4R.UDG",
#   "loadeR",
#   "transformeR",
#   "visualizeR",
#   "downscaleR"
# )
#
# mapply(
#   function(pckg, usr) {
#
#     bool <- is.element(pckg, .packages(all.available = TRUE))
#
#     if (!bool) {
#       path_url <- paste0(usr, "/", pckg)
#       print(path_url)
#       devtools::install_github(path_url)
#     }
#
#     library(pckg, character.only = TRUE)
#
#   },
#   remote_libs_to_call,
#   github_accounts,
#   SIMPLIFY = FALSE
# )
# functions
lapply(
list.files(
here("scripts", "FUN"),
full.names = T
),
source
)
makeMyDir(here("data", "tidy", "occ"))
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/boot.R", echo=TRUE)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/popa_import.R", echo=TRUE)
# importation/visualisation des probabilités d'occurrences / présences-absences
popa_path <- here("data", "analysis", "compilation")
source(here("scripts", "popa_import.R"))
?transpose
source(here::here("scripts", "boot.R"))
list.files(here("data", "tidy", "climatologies_ipcc"))
d <- list.files(here("data", "tidy", "climatologies_ipcc"), full.names = T) %>%
lapply(readRDS)
class(d[[1]])
names(d) <- c("ssp126", "ssp585")
d$ssp126
d$ssp585
as.data.frame(d$ssp126) %>% identical(as.data.frame(d$ssp585))
path_ipcc <- here("data", "tidy", "climatologies_ipcc")
makeMyDir(path_ipcc)
climosaic$slope <- terra::terrain(climosaic$depth)
# Scénario optimiste ---
climosaic_ssp126 <- climosaic
slr_minimal_change
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/giec_sst_slr.R", echo=TRUE)
slr_maximal_change
slr_minimal_change
# fichier scénarios du GIEC
path_ipcc <- here("data", "tidy", "climatologies_ipcc")
makeMyDir(path_ipcc)
climosaic$slope <- terra::terrain(climosaic$depth)
# Scénario optimiste ---
climosaic_ssp126          <- climosaic
climosaic_ssp126$depth    <- climosaic_ssp126$depth    + slr_minimal_change
climosaic_ssp126$mean.sst <- climosaic_ssp126$mean.sst + sst_minimal_change
climosaic_ssp126$stdv.sst <- climosaic_ssp126$stdv.sst + sst_minimal_change
climosaic_ssp126$mean.sbt <- climosaic_ssp126$mean.sbt + sst_minimal_change
climosaic_ssp126$stdv.sbt <- climosaic_ssp126$stdv.sbt + sst_minimal_change
class(climosaic_ssp126)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/data_environment_ipcc.R", echo=TRUE)
114764/60/60
plot(climosaic_ssp126$mean.sbt)
plot(climosaic_ssp585$mean.sbt)
plot(climosaic_ssp585$depth)
plot(climosaic_ssp126$depth)
supfam <- "Majoidea"
bn     <- "Stenorhynchus seticornis"
# occurrences locales
bio <- readRDS(here("data", "tidy", "bio", supfam, bn, "bio_local.rds"))
# Chemin des modèles générés pour le climat contemporain
path_models_out <- here("data", "analysis", "models", supfam, bn)
clim_list <- list(
"cpc" = cgc_sub[[supfam]][[bn]],
"sxt" = sxt_sub,
"hab" = hab_sub
)
pth <- list.files(path_models_out, full.names = T)[[3]]
list.files(path_models_out, full.names = T)
path_models_out
# Chemin des modèles générés pour le climat contemporain
path_models_out <- here("data", "analysis", "models_mesu", supfam, bn)
list.files(path_models_out, full.names = T)
pth <- list.files(path_models_out, full.names = T)[[3]]
pth
# pth <- list.files(path_models_out, full.names = T)[[3]]
# Identifiants du modèle
modeling_id <- str_split(pth, "/")[[1]]
modeling_id <- modeling_id[[length(modeling_id)]]
# échelle
m <- str_split(modeling_id, "\\.")[[1]]
m <- m[which(grepl("[a-z]", m))]
clim_name <- m[[length(m)]]
# Chargement rasters de projection
clim_sub      <- clim_list[[clim_name]]
clim_proj_sub <- subset(climosaic_ssp, names(clim_sub))
# Chargement rasters scénarios
ssp <- "ssp585"
climosaic_ssp <- here(
"data", "tidy", "climatologies_ipcc", paste0(ssp, ".tif")
) %>% rast()
clim_proj_sub <- subset(climosaic_ssp, names(clim_sub))
names(clim_sub)
# chemin et nom du modèle d'ensemble
pth_out <- list.files(
pth, pattern = "ensemble.models.out", full.names = T
)
nam_out <- list.files(pth, pattern = "ensemble.models.out")
# chargement du modèle d'ensemble
load(pth_out)
mod_ensemble <- get(nam_out)
# Get thresholds
all_ensemble_algos <- c("EMcv", "EMca","EMwmean")
names(all_ensemble_algos) <- all_ensemble_algos
(spec_ensemble_models_scores <- get_evaluations(mod_ensemble))
ensemble_scores_names <- c(
"metric.eval", "cutoff", "sensitivity", "specificity", "calibration"
)
# ensemble scores ----
EMscores <- all_ensemble_algos %>% lapply(
\(a) {
# a <- all_ensemble_algos[[2]]
spec_ensemble_models_scores %>%
filter(algo == a) %>%
select(all_of(ensemble_scores_names)) %>%
group_by(metric.eval) %>%
summarise(cutoff = max(cutoff))
}
)
EMscores
here(
pth,
paste("proj", paste("forecast", ssp, sep = "_"), sep = "_"),
"proj_ipcc.rds"
)
paste("proj", paste("forecast", ssp, sep = "_"), sep = "_")
file.exists(
here(
pth,
paste("proj", paste("forecast", ssp, sep = "_"), sep = "_"),
"proj_ipcc.rds"
)
)
# suppresion d'un éventuel dossier déjà existant
fn <- here(
pth,
paste("proj", paste("forecast", ssp, sep = "_"), sep = "_"),
"proj_ipcc.rds"
)
fn
# suppresion d'un éventuel dossier déjà existant
fn <- here(
pth,
paste("proj", paste("forecast", ssp, sep = "_"), sep = "_")
)
file.exists(fn)
fn
if (file.exists(fn)) file.remove(fn)
?file.remove
?unlink
if (file.exists(fn)) unlink(fn, recursive = T)
# Projection dans un scénario ----
proj_ipcc <- BIOMOD_EnsembleForecasting(
bm.em         = mod_ensemble,
new.env       = clim_proj_sub,
proj.name     = paste("forecast", ssp, sep = "_"),
models.chosen = "all"
)
clim_proj_sub
mod_ensemble
