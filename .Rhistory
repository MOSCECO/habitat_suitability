quantile(local_occur$depth, 0.1)
quantile(res$depth, 0.9)
quantile(res$depth, 0.1)
quantile(res$depth, 0.05)
summary(local_occur_depth)
summary(local_occur$depth)
summary(res$depth)
all_depths <- res$depth %>% c(local_occur$depth)
summary(all_depths)
summary(all_depths)[c(2, 5)]
bnd <- summary(all_depths)[c(2, 5)]
bnd <- summary(all_depths)[c(2, 5)]
bnd
x11(); plot(hab_sub$depth)
p_depth_boundaries <- here("data", "analysis", "depth_boundaries")
makeMyDir(p_depth_boundaries)
# species
binomial_name <- "Claremontiella nodulosa"
gsub(" ", "_", binomial_name)
paste(gsub(" ", "_", binomial_name), "depth", "boundaries", sep = "_") %>%
paste0(".rds")
p_depth_boundaries <- here("data", "analysis", "depth_boundaries")
makeMyDir(p_depth_boundaries)
file_name <- paste(gsub(" ", "_", binomial_name), "depth", "boundaries", sep = "_") %>%
paste0(".rds")
saveRDS(bnd, here(p_depth_boundaries, file_name))
list.files(
here("data", "analysis", "depth_boundaries")
)
# Espèce considérée ----
binomial_name <- "Claremontiella nodulosa"
bn <- gsub(" ", "_", binomial_name)
bn
bnd <- list.files(
here("data", "analysis", "depth_boundaries"), pattern = bn, full.names = T
) %>% readRDS()
bnd
-10 %in% bnd
d <- -10
d >= bnd[[1]] & d <= bnd[[2]]
# Filtre de profondeur par connaissance expert...
# ... dont le proxy sont les 1er et 3ème quartiles des
# distribution de profondeurs des espèces.
d   <- hab_sub$depth
as.data.frame(d)
dmask <- ifel(d >= bnd[[1]] & d <= bnd[[2]], 1, 0)
x11(), plot(dmask)
x11(); plot(dmask)
bnd[[1]]
bnd[[2]]
floor(bnd[[1]]/10)*10
ceiling(bnd[[2]]/10)*10
# Filtre de profondeur par connaissance expert...
# ... dont le proxy sont les 1er et 3ème quartiles des
# distribution de profondeurs des espèces.
d   <- hab_sub$depth
bnd <- list.files(
here("data", "analysis", "depth_boundaries"), pattern = bn, full.names = T
) %>% readRDS()
# arrondissons aux dizaines inférieure et supérieure
bnd[[1]] <- floor(bnd[[1]]/10)*10
bnd[[2]] <- ceiling(bnd[[2]]/10)*10
dmask <- ifel(d >= bnd[[1]] & d <= bnd[[2]], 1, 0)
x11(); plot(dmask)
# Filtre de profondeur par connaissance expert...
# ... dont le proxy sont les 1er et 3ème quartiles des
# distribution de profondeurs des espèces.
d   <- hab_sub$depth
bnd <- list.files(
here("data", "analysis", "depth_boundaries"), pattern = bn, full.names = T
) %>% readRDS()
# arrondissons aux dizaines inférieure et supérieure
# bnd[[1]] <- floor(bnd[[1]]/10)*10
# bnd[[2]] <- ceiling(bnd[[2]]/10)*10
dmask <- ifel(d >= bnd[[1]] & d <= bnd[[2]], 1, 0)
# paramètrage ----
patterns <- c("Cla.nod.rf5.0", "Cla.nod.maxent5.0", "Cla.nod.basic.+ensemble")
x11(); plot(dmask)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/sdm_1algo_Claremontiella_nodulosa_4A_04_compilation.R", echo=TRUE)
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/sdm_1algo_Claremontiella_nodulosa_4A_05_verification_pa.R", echo=TRUE)
path_figures_carte <- here("figures", "cartes_de_distribution")
makeMyDir(path_figures_carte)
# Occurrences spatialisées de chaque espèce
offsets_title_tax <- list(
GLP = c(x = - 1.01,  y = - 0.05),
MTQ = c(x = - 0.47, y = - 0.03)
)
dimensions_ggexport <- list(
GLP = c(width = 2300, height = 2000, res = 200),
MTQ = c(width = 1850, height = 2000, res = 200)
)
figures_cartes_distributions <- mapply(
function(isl, offs, dims) {
path_figures_carte_isl <- here(path_figures_carte, isl)
makeMyDir(path_figures_carte_isl)
depths <- bathy[[isl]]
depths_bbox <- c(
xmin = min(depths$x),
ymin = min(depths$y),
xmax = max(depths$x),
ymax = max(depths$y)
)
p_distribution_taxon <- mapply(
function(tax, title_tax, col_tax) {
path_figures_carte_isl_tax <- here(path_figures_carte_isl, title_tax)
makeMyDir(path_figures_carte_isl_tax)
tb <- species[[isl]][[tax]]
tc <- count(tb, scientificName)
tc <- tc[order(-tc$n), ]
tc_threshold <- tc[tc$n >= 10, ]
tb_threshold <- tb %>%
filter(scientificName %in% tc_threshold$scientificName)
tb_split <- split(tb_threshold, f = tb_threshold$scientificName)
p_distribution_species <- lapply(
tb_split,
function(spe) {
# spe <- tb_split$`Coralliophila salebrosa`
bn_spe <- unique(spe$scientificName)
p_out <- ggplot() +
geom_tile(
data = depths,
aes(x = x, y = y, fill = value)
) +
guides(fill = "none") +
new_scale("fill") +
geom_sf(data = maps[[isl]], col = NA, fill = "lightgreen") +
geom_point(
data = spe,
aes(x = decimalLongitude, y = decimalLatitude),
col = "#C01417",
shape = "+",
size = 8
) +
theme(
axis.title = element_blank()
) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
p <- p_out  +
annotate(
"text",
label = bn_spe,
size = 11,
col = "white",
x = depths_bbox[[3]] + offs[[1]],
y = depths_bbox[[4]] + offs[[2]]
)
ggexport(
p,
filename = here(
path_figures_carte_isl_tax,
paste(
"carte",
"distribution",
isl %>% tolower(),
tax %>% tolower(),
gsub(" ", "-", bn_spe),
sep = "_"
) %>% paste0(".png")
),
width    = dims[[1]],
height   = dims[[2]],
res      = dims[[3]]
)
return(p_out)
}
)
return(p_distribution_species)
},
taxa,
Taxa,
colors_taxa,
SIMPLIFY = F,
USE.NAMES = T
)
return(p_distribution_taxon)
},
islands,
offsets_title_tax,
dimensions_ggexport,
SIMPLIFY = F,
USE.NAMES = T
)
# Copie des climatologies nécessaires pour le niveau global
source(here::here("scripts", "BASH", "sync_clim_global"))
# Copie des climatologies nécessaires pour le niveau global
source(here::here("scripts", "BASH", "sync_clim_global.txt"))
# Copie des climatologies nécessaires pour le niveau global
source(here::here("scripts", "BASH", "sync_global_clim"))
# Copie des climatologies nécessaires pour le niveau global
source(here::here("scripts", "BASH", "sync_global_clim"))
# Copie des climatologies nécessaires pour le niveau global
source(here::here("scripts", "BASH", "sync_global_clim"))
# Copie des climatologies nécessaires pour le niveau global
source(here::here("scripts", "BASH", "sync_global_clim"))
# Copie des climatologies nécessaires pour le niveau global
system(here::here("scripts", "BASH", "sync_global_clim"), )
# Copie des climatologies nécessaires pour le niveau global
system(here::here("scripts", "BASH", "sync_global_clim"))
# Copie des climatologies nécessaires pour le niveau global
cmd <- cat(
"rsync -avuc --delete /home/borea/Documents/mosceco/r_projects/MOSCECO_L2/data_env_prep/data/tidy/clim_global/ /home/borea/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/data/raw/clim_global/"
)
cmd
# Copie des climatologies nécessaires pour le niveau global
cmd <- cat(
"rsync -avuc --delete /home/borea/Documents/mosceco/r_projects/MOSCECO_L2/data_env_prep/data/tidy/clim_global/ /home/borea/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/data/raw/clim_global/"
)
# Copie des climatologies nécessaires pour le niveau global
cmd <- "rsync -avuc --delete /home/borea/Documents/mosceco/r_projects/MOSCECO_L2/data_env_prep/data/tidy/clim_global/ /home/borea/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/data/raw/clim_global/"
system(cat(cmd))
cat(cmd)
system(cat(cmd))
system(cmd)
cmd <- readline(here::here("scripts", "BASH", "sync_global_clim"))
cmd
cmd <- readline(here::here("scripts", "BASH", "sync_global_clim"))
rm(cmd)
cmd
cmd <- readline(here::here("scripts", "BASH", "sync_global_clim"))
cmd
readline(here::here("scripts", "BASH", "sync_global_clim"))
# Copie des climatologies nécessaires pour le niveau global
cmd <- "rsync -avuc --delete /home/borea/Documents/mosceco/r_projects/MOSCECO_L2/data_env_prep/data/tidy/clim_global/ /home/borea/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/data/raw/clim_global/"
system(cmd)
# boot data_occ_preparation
# libraries ----
libs_to_call <- list(
"ade4",
"biomod2",
"data.table",
"devtools",
"dismo",
"doMPI",
"factoextra",
"FactoMineR",
"ggnewscale",
"ggplot2",
"ggpubr",
"ggthemes",
"here",
"patchwork",
"purrr",
"raster",
"reshape2",
"sf",
"sp",
"stars",
"stringr",
"terra",
"tidync",
"tidyverse",
"vegan"
)
# library calls
lapply(libs_to_call, function(i) {
bool <- is.element(i, .packages(all.available = TRUE))
if (!bool) {
install.packages(i, dependencies = T)
}
library(i, character.only = TRUE)
}
)
# remote libraries (github)
Sys.getenv("GITHUB_PAT")
Sys.unsetenv("GITHUB_PAT")
Sys.getenv("GITHUB_PAT")
# remote libraries ----
remote_libs_to_call <- list(
# "RCMEMS"
"ClimateOperators"
)
github_accounts <- list(
"markpayneatwork"
)
mapply(
function(pckg, usr) {
bool <- is.element(pckg, .packages(all.available = TRUE))
if (!bool) {
path_url <- paste0(usr, "/", pckg)
print(path_url)
devtools::install_github(path_url)
}
library(pckg, character.only = TRUE)
},
remote_libs_to_call,
github_accounts,
SIMPLIFY = FALSE
)
# functions
lapply(
list.files(
here("scripts", "FUN"),
full.names = T
),
source
)
# importations d'autres projets R ----
# data_occ_analyses : "data", "raw", "shp"
#                (polygones des îles, masses d'eau DCE, bathymétrie mondiale,
#                stations et masses d'eaux modifiées)
#                 "data", "tidy", "occ"
#                (occurrences formatées et filtrées selon un seuil (10 occ))
#                01/02/2023
#                "data", "tidy", "occ", "ANT", + comm_species_* ( 2 fichiers)
#                (occurrences formatées et filtrées selon un seuil (10 occ)
#                pour les espèces communes aux deux îles)
# shapefiles ----
sf::sf_use_s2(FALSE)
wgs <- "EPSG:4326"
utm20n <- "EPSG:32620"
islands <- c("GLP", "MTQ")
names(islands) <- islands
superFamilies <- c("Majoidea", "Muricoidea")
names(superFamilies) <- superFamilies
Taxa <- c("Majoidea", "Muricidae")
names(Taxa) <- Taxa
taxa <- c("majo", "muri")
names(taxa) <- taxa
colors_taxa <- c("#d04c4e", "#5765b4")
names(colors_taxa) <- Taxa
m <- st_read(here("data", "raw", "shp", "mappemonde", "mappemonde.shp"))
# directories ----
path_models <- here("data", "analysis", "models")
makeMyDir(path_models)
# polygones îles ----
maps <- list.files(
here("data", "raw", "shp", "polygones_iles"),
pattern = "*.shp",
full.names = T
) %>%
lapply(st_read)
names(maps) <- islands
# stations & évènements de collectes
stations <- readRDS(
here("data", "raw", "shp", "stations_me_sf.rds")
)
stations_nearest <- readRDS(
here("data", "raw", "shp", "stations_ant_nearest.rds")
)
# masses d'eau de la DCE et artificielles
me <- readRDS(
here("data", "raw", "shp", "ART_masses_d-eaux", "me.rds")
)
# mtds <- c("mean", "stdv", "mini", "maxi", "qt01", "qt05", "qt95", "qt99")
mtds <- c("mean", "stdv")
# climatologies avec salinités hybrides ----
climatologies <- lapply(
list.files(
here("data", "tidy", "climatologies_spatRaster"),
full.names = T,
pattern = "updated_so"
),
rast
)
names(climatologies) <- islands
# aggrégation en mosaïque
climosaic <- mapply(
\(nx, ny) {
x <- climatologies$GLP[[nx]]
y <- climatologies$MTQ[[ny]]
terra::mosaic(x, y)
},
names(climatologies$GLP),
names(climatologies$MTQ),
SIMPLIFY = F,
USE.NAMES = T
)
climosaic <- Reduce(c, climosaic)
# Visualisation des données
lapply(
mtds,
\(mtd) {
vmtd <- names(climosaic)[grepl(mtd, names(climosaic))]
x11() ; plot(climosaic[[vmtd]])
}
)
# climatologies avec des valeurs issues d'une ACP sur toutes les variables
source(here("scripts", "climatologies_pca.R"))
# espèces communes filtrées pour 30 spécimens minimum (présences/absences)
# pa <- readRDS(
#   here("data", "raw", "occ_threshold", "list_occ_thresh.rds")
# )
pa <- readRDS(
here("data", "raw", "occ_threshold", "list_occ_thresh_nearest.rds")
)
pa$`Mithraculus forceps` %>% dim()
pa$`Mithraculus forceps` %>% View()
# "rasterisation" des données de présences-absences obtenues par le Muséum
source(here("scripts", "rasterisation_pa.R"))
# boot
source(here::here("scripts", "boot.R"))
# Méthode avec les climatologies acquises pour chaque occurrence d'espèces
# (old)
global_clims <- readRDS(here("data", "raw", "ENFA", "clims.rds"))
x11(); plot(global_clims$mean.bottomt)
global_clims$mean.bottomt
global_clims$mean.bottomt %>% class()
global_clim <- sapply(
names(global_occf),
\(supfam) {
# supfam <- "Majoidea"
sapply(
names(global_occf[[supfam]]),
\(sp) {
# sp <- names(global_occf[[supfam]])[2]
occ <- global_occf[[supfam]][[sp]]
st_extract(global_clims, occ, bilinear = T)
},
simplify = F, USE.NAMES = T
)
},
simplify = F, USE.NAMES = T
)
global_clim$Majoidea$Amphithrax_hemphilli
global_clim$Majoidea$Amphithrax_hemphilli %>% View()
# Sélection de l'espèce
# bn <- "Claremontiella nodulosa"
species <- "Mithraculus_forceps"
list.files(
here("data", "raw", "clim_global", superfm, species)
)
# Sélection de l'espèce
# bn <- "Claremontiella nodulosa"
superfm <- "Majoidea"
species <- "Mithraculus_forceps"
list.files(
here("data", "raw", "clim_global", superfm, species)
)
# Import des climatologies au niveau global
clim_global <- list.files(
here("data", "raw", "clim_global", superfm, species), full.names = T
) %>% lapply(read_csv)
clim_global %>% length()
clim_global %>% class()
clim_global[[1]] %>% class()
list.files(
here("data", "raw", "clim_global", superfm, species)
) %>% substr(1, nchar(.)-4)
names(clim_global) <- list.files(
here("data", "raw", "clim_global", superfm, species)
) %>% substr(1, nchar(.)-4)
clim_global$bottomt %>% View()
# Méthode pour ENFA avec climatologies sur tout le pourtour des amériques
# copernicus global climatologies
cgc <- here("data", "raw", "clim_cenfa_clanod", "clims.rds") %>%
readRDS() %>%
rast()
cgc_clanod <- readRDS(
here("data", "raw", "clim_cenfa_clanod", "dataset_occ_clims.rds")
)
cgc$mean.bottomt_lyr.1
cgc_clanod$mean.bottomt
cgc_clanod %>% View()
# Modification de la forme des climatologies global pour avoir une matrice
coords <- clim_global$bottomt[, c("x", "y")]
head(coords)
n <- "so"
tb <- clim_global[[n]]
View(cgc_clanod)
tb <- tb %>% select(-c(x, y))
names(tb)
names(tb) %>% str_split("_") %>% lapply(pluck, 2) %>% paste0(n)
names(tb) %>% str_split("_") %>% lapply(pluck, 2) %>% paste(n, sep = "_")
names(tb) <- names(tb) %>%
str_split("_") %>% lapply(pluck, 2) %>% paste(n, sep = "_")
View(tb)
clim_global <- lapply(
names(clim_global),
\(n) {
tb <- clim_global[[n]]
tb <- tb %>% select(-c(x, y))
names(tb) <- names(tb) %>%
str_split("_") %>%
lapply(pluck, 2) %>%
paste(n, sep = "_")
return(tb)
}
)
clim_global
clim_global <- cbind(coords, do.call(cbind, clim_global))
View(clim_global)
names'climosaic'
names(climosaic)
# sextant local climatologies
sxt_sub <- climosaic %>%
terra::subset(names(.)[grepl("ssm|tur|chla|sst", names(.))])
var_col <- usdm::vifstep(as.data.frame(sxt_sub %>% na.omit()))@excluded
sxt_sub <- subset(sxt_sub, names(sxt_sub)[!names(sxt_sub) %in% var_col])
sxt_sub
x11(); plot(sxt_sub)
sxt_sub <- climosaic %>%
terra::subset(names(.)[grepl("ssm|tur|chla|sst", names(.))])
var_col <- usdm::vifstep(as.data.frame(sxt_sub %>% na.omit()))@excluded
sxt_sub <- subset(sxt_sub, names(sxt_sub)[!names(sxt_sub) %in% var_col])
# sextant local means climatologies
sxt_sub_means <- climosaic %>%
terra::subset(names(.)[grepl("ssm|tur|chla|sst", names(.))]) %>%
terra::subset(names(.)[grepl("mean", names(.))])
var_col <- usdm::vifstep(as.data.frame(sxt_sub_means %>% na.omit()))@excluded
sxt_sub_means <- subset(
sxt_sub_means, names(sxt_sub_means)[!names(sxt_sub_means) %in% var_col]
)
sxt_sub_means
names(sxt_sub)
names(sxt_sub_means)
hab_sub <-  climosaic %>%
terra::subset(names(.)[grepl("depth", names(.))])
hab_sub$slope <- terra::terrain(hab_sub)
var_col <- usdm::vifstep(as.data.frame(hab_sub %>% na.omit()))@excluded
hab_sub <- subset(hab_sub, names(hab_sub)[!names(hab_sub) %in% var_col])
hab_sub
