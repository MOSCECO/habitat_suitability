)
# Espèces à modéliser
species <- tibble(
superFamily = c(rep("Majoidea", 2), rep("Muricoidea", 2)),
species     = c(
"Amphithrax hemphilli",
"Macrocoeloma nodipes",
"Mithraculus coryphe",
"Mithraculus forceps",
"Mithrax pleuracanthus",
"Omalacantha bicornuta",
"Stenorhynchus seticornis",
"Teleophrys ruber",
"Claremontiella nodulosa",
"Coralliophila galea",
"Coralliophila salebrosa",
"Favartia alveata",
"Favartia varimutabilis",
"Phyllonotus pomum",
"Siratus consuelae",
"Stramonita rustica",
"Trachypollia didyma",
"Vasula deltoidea",
NULL
)
)
# Espèces à modéliser
species <- tibble(
superFamily = c(rep("Majoidea", 8), rep("Muricoidea", 10)),
species     = c(
"Amphithrax hemphilli",
"Macrocoeloma nodipes",
"Mithraculus coryphe",
"Mithraculus forceps",
"Mithrax pleuracanthus",
"Omalacantha bicornuta",
"Stenorhynchus seticornis",
"Teleophrys ruber",
"Claremontiella nodulosa",
"Coralliophila galea",
"Coralliophila salebrosa",
"Favartia alveata",
"Favartia varimutabilis",
"Phyllonotus pomum",
"Siratus consuelae",
"Stramonita rustica",
"Trachypollia didyma",
"Vasula deltoidea",
NULL
)
)
clim_global <- sapply(
superFamilies,
\(supfm) {
sapply(
species$species[species$superFamily == supfm],
\(spe) {
# supfm <- "Majoidea"
# spe <- "Stenorhynchus seticornis"
O <- global_occf[[spe]]
cg <- terra::extract(cgc, O, method = "bilinear")
table(is.na(cg$mean.sbt))
return(cg)
},
simplify  = F,
USE.NAMES = T
)
},
simplify  = F,
USE.NAMES = T
)
clim_global
clim_global <- sapply(
superFamilies,
\(supfm) {
sapply(
species$species[species$superFamily == supfm],
\(spe) {
# supfm <- "Majoidea"
# spe <- "Stenorhynchus seticornis"
O <- global_occf[[spe]]
cg <- terra::extract(cgc, O, method = "bilinear", ID = F)
table(is.na(cg$mean.sbt))
return(cg)
},
simplify  = F,
USE.NAMES = T
)
},
simplify  = F,
USE.NAMES = T
)
lapply(clim_global, \(x) table(is.na(x[, 1])))
clim_global
length(clim_global)
lapply(clim_global$Majoidea, \(x) table(is.na(x[, 1])))
lapply(clim_global$Muricoidea, \(x) table(is.na(x[, 1])))
# lapply(clim_global$Majoidea, \(x) table(is.na(x[, 1])))
# lapply(clim_global$Muricoidea, \(x) table(is.na(x[, 1])))
# Modification de la forme des climatologies global pour avoir une matrice
clim_global_tb <- sapply(
names(clim_global),
\(supfm) {
sapply(
names(clim_global[[supfm]]),
\(spe) {
# supfm <- "Majoidea"
# spe <- "Stenorhynchus seticornis"
cg <- clim_global[[supfm]][[spe]]
# coords <- cg$sbt[, c("x", "y")]
# uniformisation des stations présentes (problème avec so chais pas pk)
z <- names(which.min(lapply(cg, nrow) %>% unlist()))
tbm <- cg[[z]]
stn <- paste(tbm$x, tbm$y)
coords <- tbm[, c("x", "y")]
cg2 <- lapply(
names(cg),
\(n) {
tb <- cg[[n]]
# uniformisation des stations présentes (problème avec so chais pas pk)
tb <- if (nrow(tb) > length(stn)) {
tbi <- tb[paste(tb$x, tb$y) %in% stn, ]
tbi <- tbi[which(paste(tbi$x, tbi$y) %in% stn), ]
tbi
} else {
tb[which(paste(tb$x, tb$y) %in% stn), ]
}
tb <- tb %>%
select(-c(x, y))
names(tb) <- names(tb) %>%
str_split("_") %>%
lapply(pluck, 2) %>%
paste(n, sep = ".")
return(tb)
})
cbind(coords, do.call(cbind, cg2)) %>%
na.omit()
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
supfm <- "Majoidea"
spe <- "Stenorhynchus seticornis"
# supfm <- "Majoidea"
# spe <- "Stenorhynchus seticornis"
cg <- clim_global[[supfm]][[spe]]
# uniformisation des stations présentes (problème avec so chais pas pk)
z <- names(which.min(lapply(cg, nrow) %>% unlist()))
z
# sélection des variables environnementales uniquement
# et les métriques que l'on veut sélectionner (ici sd et mean)
cgc_sub <- sapply(
names(clim_global),
\(supfm) {
sapply(
names(clim_global[[supfm]]),
\(spe) {
tb <- clim_global[[supfm]][[spe]]
tb <- tb %>%
select(names(.)[grepl("stdv|mean", names(.))])
return(tb)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
cgc_sub
clim_global <- sapply(
superFamilies,
\(supfm) {
sapply(
species$species[species$superFamily == supfm],
\(spe) {
# supfm <- "Majoidea"
# spe <- "Stenorhynchus seticornis"
O <- global_occf[[spe]]
cg <- terra::extract(cgc, O, method = "bilinear", ID = F)
return(na.omit(cg))
},
simplify  = F,
USE.NAMES = T
)
},
simplify  = F,
USE.NAMES = T
)
lapply(clim_global$Majoidea, \(x) table(is.na(x[, 1])))
lapply(clim_global$Muricoidea, \(x) table(is.na(x[, 1])))
# sélection des variables environnementales uniquement
# et les métriques que l'on veut sélectionner (ici sd et mean)
cgc_sub <- sapply(
names(clim_global),
\(supfm) {
sapply(
names(clim_global[[supfm]]),
\(spe) {
tb <- clim_global[[supfm]][[spe]]
tb <- tb %>%
select(names(.)[grepl("stdv|mean", names(.))])
return(tb)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
# Filtre des variables colinéaires
cgc_sub <- sapply(
names(cgc_sub),
\(supfm) {
sapply(
names(cgc_sub[[supfm]]),
\(spe) {
tb <- cgc_sub[[supfm]][[spe]]
var_col <- usdm::vifstep(as.data.frame(tb %>% na.omit()))@excluded
tb <- tb[, !names(tb) %in% var_col]
return(tb)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
# Même object en sf
cgc_sub_sf <- sapply(
names(cgc_sub),
\(supfm) {
sapply(
names(cgc_sub[[supfm]]),
\(spe) {
nms <- names(cgc_sub[[supfm]][[spe]])
tb <- clim_global_tb[[supfm]][[spe]]
st_as_sf(
tb %>% select(all_of(c("x", "y", nms))),
coords = c("x", "y"),
crs = "EPSG:4326"
)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
names(cgc_sub)
supfm <- "Majoidea"
spe <- "Stenorhynchus seticornis"
nms <- names(cgc_sub[[supfm]][[spe]])
nms
tb <- clim_global_tb[[supfm]][[spe]]
tb
tb %>% select(all_of(c("x", "y", nms)))
st_as_sf(
tb %>% select(all_of(c("x", "y", nms))),
coords = c("x", "y"),
crs = "EPSG:4326"
)
names(clim_global$Majoidea)
names(clim_global$Majoidea$`Amphithrax hemphilli`)
clim_global <- sapply(
superFamilies,
\(supfm) {
sapply(
species$species[species$superFamily == supfm],
\(spe) {
# supfm <- "Majoidea"
# spe <- "Stenorhynchus seticornis"
O <- global_occf[[spe]]
cg <- terra::extract(cgc, O, method = "bilinear", ID = F, xy = T)
return(na.omit(cg))
},
simplify  = F,
USE.NAMES = T
)
},
simplify  = F,
USE.NAMES = T
)
# sélection des variables environnementales uniquement
# et les métriques que l'on veut sélectionner (ici sd et mean)
cgc_sub <- sapply(
names(clim_global),
\(supfm) {
sapply(
names(clim_global[[supfm]]),
\(spe) {
tb <- clim_global[[supfm]][[spe]]
tb <- tb %>%
select(names(.)[grepl("stdv|mean", names(.))])
return(tb)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
# Filtre des variables colinéaires
cgc_sub <- sapply(
names(cgc_sub),
\(supfm) {
sapply(
names(cgc_sub[[supfm]]),
\(spe) {
tb <- cgc_sub[[supfm]][[spe]]
var_col <- usdm::vifstep(as.data.frame(tb %>% na.omit()))@excluded
tb <- tb[, !names(tb) %in% var_col]
return(tb)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
# Même object en sf
cgc_sub_sf <- sapply(
names(cgc_sub),
\(supfm) {
sapply(
names(cgc_sub[[supfm]]),
\(spe) {
# supfm <- "Majoidea"
# spe <- "Stenorhynchus seticornis"
nms <- names(cgc_sub[[supfm]][[spe]])
tb <- clim_global_tb[[supfm]][[spe]]
st_as_sf(
tb %>% select(all_of(c("x", "y", nms))),
coords = c("x", "y"),
crs = "EPSG:4326"
)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
# Même object en sf
cgc_sub_sf <- sapply(
names(cgc_sub),
\(supfm) {
sapply(
names(cgc_sub[[supfm]]),
\(spe) {
# supfm <- "Majoidea"
# spe <- "Stenorhynchus seticornis"
nms <- names(cgc_sub[[supfm]][[spe]])
tb  <- clim_global[[supfm]][[spe]]
st_as_sf(
tb %>% select(all_of(c("x", "y", nms))),
coords = c("x", "y"),
crs = "EPSG:4326"
)
},
simplify = F,
USE.NAMES = T
)
},
simplify = F,
USE.NAMES = T
)
cgc_sub_sf
lapply(cgc_sub_sf, dim)
lapply(cgc_sub_sf$Majoidea, dim)
lapply(cgc_sub_sf$Majoidea, dim) %>% identical(lapply(clim_global$Majoidea, dim))
lapply(cgc_sub_sf$Majoidea, dim) %>% identical(lapply(cgc_sub$Majoidea, dim))
lapply(cgc_sub_sf$Majoidea, nrow) %>% identical(lapply(clim_global$Majoidea, nrow))
source("~/Documents/mosceco/r_projects/MOSCECO_L2/habitat_suitability/scripts/boot.R")
list(1, 2, 3) + list(4, 5, 6)
list(1, 2, 3)
list(1, 2, 3) %>% append(list(4, 5, 6))
source(here::here("scripts", "boot.R"))
bn <- "Mithraculus forceps"
alg <- "ENS"
cat(
"Début de routine\n",
"Espèce : ", bn, "\n",
"Algorithme : ", alg, "\n"
)
# alg <- "RF"
# alg <- "MAXENT"
# alg <- "ensemble"
# Nombre de répétitions (nombre de jeux de validation croisées)
CV_nb_rep <- 5
# nom du modèle
vec_name_model <- c(paste0(tolower(alg), CV_nb_rep), "01", "global", "cpc", "2")
pts_name_model <- paste(vec_name_model, collapse = ".")
# Données biologiques ----
# bn <- "Claremontiella nodulosa"
supfam <- species$superFamily[species$species == bn]
sp  <- pa[[bn]] %>% as.data.frame(xy = T)
binnam <- str_split(bn, " ")[[1]] %>%
lapply(substr, 1, 3) %>%
paste0(collapse = ".")
# jeux de données environnementales pour calibration du SDM ----
# carte globale des variables environnementales
clim_sub      <- cgc_sub[[supfam]][[bn]]
clim_proj_sub <- subset(climosaic, names(clim_sub))
# Données locales ----
# Présences ----
spp_local <- sp %>%
filter(individualCount > 0) %>%
cbind(type = "pr", id = paste0("pr", 1:nrow(.)), scale = "local") %>%
select(type, id, scale, x, y, individualCount)
spp_local_sf <- st_as_sf(
spp_local,
coords = c("x", "y"),
remove = F,
crs = "EPSG:4326"
)
spp_local_sf <- spp_local_sf %>%
cbind(terra::extract(clim_proj_sub, spp_local_sf, ID = F))
dim(spp_local_sf)
names(spp_local_sf)
# Absences ----
spa_local <- sp %>%
filter(individualCount == 0) %>%
cbind(type = "ab", id = paste0("ab", 1:nrow(.)), scale = "local") %>%
select(type, id, scale, x, y, individualCount)
spa_local_sf <- st_as_sf(
spa_local,
coords = c("x", "y"),
remove = F,
crs = "EPSG:4326"
)
spa_local_sf <- spa_local_sf %>%
cbind(terra::extract(clim_proj_sub, spa_local_sf, ID = F))
dim(spa_local_sf)
# Données mondiales ----
# Présences ----
pas <- nrow(spp_local_sf) + 1
spp_global_sf <- cgc_sub_sf[[supfam]][[bn]] %>%
cbind(st_coordinates(cgc_sub_sf[[supfam]][[bn]])) %>%
cbind(
type = "pr",
id = paste0("pr", pas:(pas + nrow(cgc_sub_sf[[supfam]][[bn]]) - 1)),
scale = "global",
individualCount = 1
) %>%
select(
type, id, scale, x = X, y = Y, individualCount, all_of(names(clim_sub))
)
dim(spp_global_sf)
# Pseudo-absences ----
set.seed(123)
pa_set <- bm_PseudoAbsences(
resp.var    = rep(1, nrow(spp_global_sf)),
expl.var    = subset(cgc, names(clim_sub)),
nb.absences = nrow(spp_global_sf)*2,
strategy    = "random"
)
#   ) %>% lengths())
# ) {
#   i <- i + 1
#   print(i)
#   set.seed(i)
#   pa_set <- bm_PseudoAbsences(
#     resp.var    = rep(1, nrow(spp_global_sf)),
#     expl.var    = subset(cgc, names(clim_sub)),
#     nb.absences = nrow(spp_global_sf)
#   )
print(
apply(
pa_set$env[grepl("pa", row.names(pa_set$xy)), ], 2, \(x) table(is.na(x))
)
)
# )
# }
pa_set_nona <- (pa_set$env[grepl("pa", row.names(pa_set$xy)), ] %>%
na.omit())
pa_set_nona <- pa_set_nona[
sample(1:nrow(pa_set_nona), size = nrow(spp_global_sf)),
]
spa_global_sf <- cbind(
type = "pa",
id = row.names(pa_set$xy),
scale = "global",
pa_set$xy,
individualCount = 0,
pa_set$env
) %>%
filter(grepl("pa", .$id)) %>%
as_tibble() %>%
st_as_sf(
.,
coords = c("x", "y"),
remove = F,
crs = "EPSG:4326"
)
dim(spa_global_sf)
# Aggrégation données biologiques ----
bio_list <- list(spp_local_sf, spa_local_sf, spp_global_sf, spa_global_sf)
bio <- do.call(rbind, bio_list)
bio <- bio %>%
arrange(desc(individualCount), type)
dim(bio)
